//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 
// D:\dev\SubtitleDownloader\SubtitleDownloader\Implementations\Sublight>wsdl /out:
// SublightAPI.cs http://www.sublight.si/API/WS/Sublight.asmx?WSDL
//

namespace SubtitleDownloader.Implementations.SublightApi
    {
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SublightSoap", Namespace="http://www.sublight.si/")]
    public class Sublight : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
        private System.Threading.SendOrPostCallback LogIn6OperationCompleted;
    
        private System.Threading.SendOrPostCallback LogInSecureOperationCompleted;
    
        private System.Threading.SendOrPostCallback LogInSecure2OperationCompleted;
    
        private System.Threading.SendOrPostCallback LogInAnonymous4OperationCompleted;
    
        private System.Threading.SendOrPostCallback LogOutOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetUserBySessionOperationCompleted;
    
        private System.Threading.SendOrPostCallback RegisterOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetUserLog2OperationCompleted;
    
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
    
        private System.Threading.SendOrPostCallback UpdateEmailOperationCompleted;
    
        private System.Threading.SendOrPostCallback SendCommentOperationCompleted;
    
        private System.Threading.SendOrPostCallback SuggestTitlesOperationCompleted;
    
        private System.Threading.SendOrPostCallback SuggestTitles2OperationCompleted;
    
        private System.Threading.SendOrPostCallback AddReleaseOperationCompleted;
    
        private System.Threading.SendOrPostCallback SearchSubtitles3OperationCompleted;
    
        private System.Threading.SendOrPostCallback SearchSubtitles4OperationCompleted;
    
        private System.Threading.SendOrPostCallback GetSubtitleByIdOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetStatisticsOperationCompleted;
    
        private System.Threading.SendOrPostCallback FindIMDBOperationCompleted;
    
        private System.Threading.SendOrPostCallback FindIMDB2OperationCompleted;
    
        private System.Threading.SendOrPostCallback RateSubtitleOperationCompleted;
    
        private System.Threading.SendOrPostCallback PublishSubtitleOperationCompleted;
    
        private System.Threading.SendOrPostCallback PublishSubtitle2OperationCompleted;
    
        private System.Threading.SendOrPostCallback PublishEditedSubtitle2OperationCompleted;
    
        private System.Threading.SendOrPostCallback PublishEditedSubtitle3OperationCompleted;
    
        private System.Threading.SendOrPostCallback MapHashOperationCompleted;
    
        private System.Threading.SendOrPostCallback CheckSubtitle3OperationCompleted;
    
        private System.Threading.SendOrPostCallback CheckSubtitle4OperationCompleted;
    
        private System.Threading.SendOrPostCallback GetDownloadTicketOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetDownloadTicket2OperationCompleted;
    
        private System.Threading.SendOrPostCallback UpdateSubtitleOperationCompleted;
    
        private System.Threading.SendOrPostCallback DeleteSubtitleOperationCompleted;
    
        private System.Threading.SendOrPostCallback AddHashLink3OperationCompleted;
    
        private System.Threading.SendOrPostCallback AddHashLink4OperationCompleted;
    
        private System.Threading.SendOrPostCallback AddHashLinkSemiAutomatic3OperationCompleted;
    
        private System.Threading.SendOrPostCallback AddHashLinkSemiAutomatic4OperationCompleted;
    
        private System.Threading.SendOrPostCallback AddHashLinkSemiAutomatic5OperationCompleted;
    
        private System.Threading.SendOrPostCallback AddHashLinkAutomatic3OperationCompleted;
    
        private System.Threading.SendOrPostCallback AddHashLinkAutomatic4OperationCompleted;
    
        private System.Threading.SendOrPostCallback ReportHashLinkOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetReleasesOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetReleases2OperationCompleted;
    
        private System.Threading.SendOrPostCallback GetHistoryOperationCompleted;
    
        private System.Threading.SendOrPostCallback DownloadByID4OperationCompleted;
    
        private System.Threading.SendOrPostCallback DownloadByID5OperationCompleted;
    
        private System.Threading.SendOrPostCallback ReportSubtitleOperationCompleted;
    
        private System.Threading.SendOrPostCallback ReportSubtitle2OperationCompleted;
    
        private System.Threading.SendOrPostCallback GetNewSubtitlesOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetFavoriteSubtitlesOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetMyUploadsOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetMyDownloadsOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetSubtitleThanksOperationCompleted;
    
        private System.Threading.SendOrPostCallback AddSubtitleThankOperationCompleted;
    
        private System.Threading.SendOrPostCallback SubtitlePreviewOperationCompleted;
    
        private System.Threading.SendOrPostCallback AddAlternativeTitleOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetSubtitleCommentsOperationCompleted;
    
        private System.Threading.SendOrPostCallback SubtitleCommentVoteOperationCompleted;
    
        private System.Threading.SendOrPostCallback SubtitleCommentDeleteOperationCompleted;
    
        private System.Threading.SendOrPostCallback AddSubtitleCommentOperationCompleted;
    
        private System.Threading.SendOrPostCallback SynchronizeSubtitleOperationCompleted;
    
        private System.Threading.SendOrPostCallback SubtitleDetectLanguageOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetPushMessageOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetDetailsOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetDetailsByHashOperationCompleted;
    
        private System.Threading.SendOrPostCallback UpdatePosterUrlOperationCompleted;
    
        private System.Threading.SendOrPostCallback UpdatePoster2OperationCompleted;
    
        private System.Threading.SendOrPostCallback GetPosterUrlOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetPosterOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetPoster2OperationCompleted;
    
        private System.Threading.SendOrPostCallback UpdateUserRatingOperationCompleted;
    
        private System.Threading.SendOrPostCallback VoteMovieHashOperationCompleted;
    
        private System.Threading.SendOrPostCallback RequestPasswordResetOperationCompleted;
    
        private System.Threading.SendOrPostCallback GetSummaryOperationCompleted;
    
        /// <remarks/>
        public Sublight() {
            this.Url = "http://www.sublight.si/API/WS/Sublight.asmx";
        }
    
        /// <remarks/>
        public event LogIn6CompletedEventHandler LogIn6Completed;
    
        /// <remarks/>
        public event LogInSecureCompletedEventHandler LogInSecureCompleted;
    
        /// <remarks/>
        public event LogInSecure2CompletedEventHandler LogInSecure2Completed;
    
        /// <remarks/>
        public event LogInAnonymous4CompletedEventHandler LogInAnonymous4Completed;
    
        /// <remarks/>
        public event LogOutCompletedEventHandler LogOutCompleted;
    
        /// <remarks/>
        public event GetUserBySessionCompletedEventHandler GetUserBySessionCompleted;
    
        /// <remarks/>
        public event RegisterCompletedEventHandler RegisterCompleted;
    
        /// <remarks/>
        public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
    
        /// <remarks/>
        public event GetUserLog2CompletedEventHandler GetUserLog2Completed;
    
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
    
        /// <remarks/>
        public event UpdateEmailCompletedEventHandler UpdateEmailCompleted;
    
        /// <remarks/>
        public event SendCommentCompletedEventHandler SendCommentCompleted;
    
        /// <remarks/>
        public event SuggestTitlesCompletedEventHandler SuggestTitlesCompleted;
    
        /// <remarks/>
        public event SuggestTitles2CompletedEventHandler SuggestTitles2Completed;
    
        /// <remarks/>
        public event AddReleaseCompletedEventHandler AddReleaseCompleted;
    
        /// <remarks/>
        public event SearchSubtitles3CompletedEventHandler SearchSubtitles3Completed;
    
        /// <remarks/>
        public event SearchSubtitles4CompletedEventHandler SearchSubtitles4Completed;
    
        /// <remarks/>
        public event GetSubtitleByIdCompletedEventHandler GetSubtitleByIdCompleted;
    
        /// <remarks/>
        public event GetStatisticsCompletedEventHandler GetStatisticsCompleted;
    
        /// <remarks/>
        public event FindIMDBCompletedEventHandler FindIMDBCompleted;
    
        /// <remarks/>
        public event FindIMDB2CompletedEventHandler FindIMDB2Completed;
    
        /// <remarks/>
        public event RateSubtitleCompletedEventHandler RateSubtitleCompleted;
    
        /// <remarks/>
        public event PublishSubtitleCompletedEventHandler PublishSubtitleCompleted;
    
        /// <remarks/>
        public event PublishSubtitle2CompletedEventHandler PublishSubtitle2Completed;
    
        /// <remarks/>
        public event PublishEditedSubtitle2CompletedEventHandler PublishEditedSubtitle2Completed;
    
        /// <remarks/>
        public event PublishEditedSubtitle3CompletedEventHandler PublishEditedSubtitle3Completed;
    
        /// <remarks/>
        public event MapHashCompletedEventHandler MapHashCompleted;
    
        /// <remarks/>
        public event CheckSubtitle3CompletedEventHandler CheckSubtitle3Completed;
    
        /// <remarks/>
        public event CheckSubtitle4CompletedEventHandler CheckSubtitle4Completed;
    
        /// <remarks/>
        public event GetDownloadTicketCompletedEventHandler GetDownloadTicketCompleted;
    
        /// <remarks/>
        public event GetDownloadTicket2CompletedEventHandler GetDownloadTicket2Completed;
    
        /// <remarks/>
        public event UpdateSubtitleCompletedEventHandler UpdateSubtitleCompleted;
    
        /// <remarks/>
        public event DeleteSubtitleCompletedEventHandler DeleteSubtitleCompleted;
    
        /// <remarks/>
        public event AddHashLink3CompletedEventHandler AddHashLink3Completed;
    
        /// <remarks/>
        public event AddHashLink4CompletedEventHandler AddHashLink4Completed;
    
        /// <remarks/>
        public event AddHashLinkSemiAutomatic3CompletedEventHandler AddHashLinkSemiAutomatic3Completed;
    
        /// <remarks/>
        public event AddHashLinkSemiAutomatic4CompletedEventHandler AddHashLinkSemiAutomatic4Completed;
    
        /// <remarks/>
        public event AddHashLinkSemiAutomatic5CompletedEventHandler AddHashLinkSemiAutomatic5Completed;
    
        /// <remarks/>
        public event AddHashLinkAutomatic3CompletedEventHandler AddHashLinkAutomatic3Completed;
    
        /// <remarks/>
        public event AddHashLinkAutomatic4CompletedEventHandler AddHashLinkAutomatic4Completed;
    
        /// <remarks/>
        public event ReportHashLinkCompletedEventHandler ReportHashLinkCompleted;
    
        /// <remarks/>
        public event GetReleasesCompletedEventHandler GetReleasesCompleted;
    
        /// <remarks/>
        public event GetReleases2CompletedEventHandler GetReleases2Completed;
    
        /// <remarks/>
        public event GetHistoryCompletedEventHandler GetHistoryCompleted;
    
        /// <remarks/>
        public event DownloadByID4CompletedEventHandler DownloadByID4Completed;
    
        /// <remarks/>
        public event DownloadByID5CompletedEventHandler DownloadByID5Completed;
    
        /// <remarks/>
        public event ReportSubtitleCompletedEventHandler ReportSubtitleCompleted;
    
        /// <remarks/>
        public event ReportSubtitle2CompletedEventHandler ReportSubtitle2Completed;
    
        /// <remarks/>
        public event GetNewSubtitlesCompletedEventHandler GetNewSubtitlesCompleted;
    
        /// <remarks/>
        public event GetFavoriteSubtitlesCompletedEventHandler GetFavoriteSubtitlesCompleted;
    
        /// <remarks/>
        public event GetMyUploadsCompletedEventHandler GetMyUploadsCompleted;
    
        /// <remarks/>
        public event GetMyDownloadsCompletedEventHandler GetMyDownloadsCompleted;
    
        /// <remarks/>
        public event GetSubtitleThanksCompletedEventHandler GetSubtitleThanksCompleted;
    
        /// <remarks/>
        public event AddSubtitleThankCompletedEventHandler AddSubtitleThankCompleted;
    
        /// <remarks/>
        public event SubtitlePreviewCompletedEventHandler SubtitlePreviewCompleted;
    
        /// <remarks/>
        public event AddAlternativeTitleCompletedEventHandler AddAlternativeTitleCompleted;
    
        /// <remarks/>
        public event GetSubtitleCommentsCompletedEventHandler GetSubtitleCommentsCompleted;
    
        /// <remarks/>
        public event SubtitleCommentVoteCompletedEventHandler SubtitleCommentVoteCompleted;
    
        /// <remarks/>
        public event SubtitleCommentDeleteCompletedEventHandler SubtitleCommentDeleteCompleted;
    
        /// <remarks/>
        public event AddSubtitleCommentCompletedEventHandler AddSubtitleCommentCompleted;
    
        /// <remarks/>
        public event SynchronizeSubtitleCompletedEventHandler SynchronizeSubtitleCompleted;
    
        /// <remarks/>
        public event SubtitleDetectLanguageCompletedEventHandler SubtitleDetectLanguageCompleted;
    
        /// <remarks/>
        public event GetPushMessageCompletedEventHandler GetPushMessageCompleted;
    
        /// <remarks/>
        public event GetDetailsCompletedEventHandler GetDetailsCompleted;
    
        /// <remarks/>
        public event GetDetailsByHashCompletedEventHandler GetDetailsByHashCompleted;
    
        /// <remarks/>
        public event UpdatePosterUrlCompletedEventHandler UpdatePosterUrlCompleted;
    
        /// <remarks/>
        public event UpdatePoster2CompletedEventHandler UpdatePoster2Completed;
    
        /// <remarks/>
        public event GetPosterUrlCompletedEventHandler GetPosterUrlCompleted;
    
        /// <remarks/>
        public event GetPosterCompletedEventHandler GetPosterCompleted;
    
        /// <remarks/>
        public event GetPoster2CompletedEventHandler GetPoster2Completed;
    
        /// <remarks/>
        public event UpdateUserRatingCompletedEventHandler UpdateUserRatingCompleted;
    
        /// <remarks/>
        public event VoteMovieHashCompletedEventHandler VoteMovieHashCompleted;
    
        /// <remarks/>
        public event RequestPasswordResetCompletedEventHandler RequestPasswordResetCompleted;
    
        /// <remarks/>
        public event GetSummaryCompletedEventHandler GetSummaryCompleted;
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/LogIn6", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid LogIn6(string username, string passwordHash, ClientInfo clientInfo, string[] args, out System.Guid userId, out string[] roles, out SubtitleLanguage[] primaryLanguages, out string[] settings, out string error) {
            object[] results = this.Invoke("LogIn6", new object[] {
                        username,
                        passwordHash,
                        clientInfo,
                        args});
            userId = ((System.Guid)(results[1]));
            roles = ((string[])(results[2]));
            primaryLanguages = ((SubtitleLanguage[])(results[3]));
            settings = ((string[])(results[4]));
            error = ((string)(results[5]));
            return ((System.Guid)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginLogIn6(string username, string passwordHash, ClientInfo clientInfo, string[] args, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogIn6", new object[] {
                        username,
                        passwordHash,
                        clientInfo,
                        args}, callback, asyncState);
        }
    
        /// <remarks/>
        public System.Guid EndLogIn6(System.IAsyncResult asyncResult, out System.Guid userId, out string[] roles, out SubtitleLanguage[] primaryLanguages, out string[] settings, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            userId = ((System.Guid)(results[1]));
            roles = ((string[])(results[2]));
            primaryLanguages = ((SubtitleLanguage[])(results[3]));
            settings = ((string[])(results[4]));
            error = ((string)(results[5]));
            return ((System.Guid)(results[0]));
        }
    
        /// <remarks/>
        public void LogIn6Async(string username, string passwordHash, ClientInfo clientInfo, string[] args) {
            this.LogIn6Async(username, passwordHash, clientInfo, args, null);
        }
    
        /// <remarks/>
        public void LogIn6Async(string username, string passwordHash, ClientInfo clientInfo, string[] args, object userState) {
            if ((this.LogIn6OperationCompleted == null)) {
                this.LogIn6OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogIn6OperationCompleted);
            }
            this.InvokeAsync("LogIn6", new object[] {
                        username,
                        passwordHash,
                        clientInfo,
                        args}, this.LogIn6OperationCompleted, userState);
        }
    
        private void OnLogIn6OperationCompleted(object arg) {
            if ((this.LogIn6Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogIn6Completed(this, new LogIn6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/LogInSecure", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid LogInSecure(string username, string passwordHash, ClientInfo clientInfo, string[] args, out System.Guid userId, out string[] roles, out SubtitleLanguage[] primaryLanguages, out string[] settings, out string error) {
            object[] results = this.Invoke("LogInSecure", new object[] {
                        username,
                        passwordHash,
                        clientInfo,
                        args});
            userId = ((System.Guid)(results[1]));
            roles = ((string[])(results[2]));
            primaryLanguages = ((SubtitleLanguage[])(results[3]));
            settings = ((string[])(results[4]));
            error = ((string)(results[5]));
            return ((System.Guid)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginLogInSecure(string username, string passwordHash, ClientInfo clientInfo, string[] args, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogInSecure", new object[] {
                        username,
                        passwordHash,
                        clientInfo,
                        args}, callback, asyncState);
        }
    
        /// <remarks/>
        public System.Guid EndLogInSecure(System.IAsyncResult asyncResult, out System.Guid userId, out string[] roles, out SubtitleLanguage[] primaryLanguages, out string[] settings, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            userId = ((System.Guid)(results[1]));
            roles = ((string[])(results[2]));
            primaryLanguages = ((SubtitleLanguage[])(results[3]));
            settings = ((string[])(results[4]));
            error = ((string)(results[5]));
            return ((System.Guid)(results[0]));
        }
    
        /// <remarks/>
        public void LogInSecureAsync(string username, string passwordHash, ClientInfo clientInfo, string[] args) {
            this.LogInSecureAsync(username, passwordHash, clientInfo, args, null);
        }
    
        /// <remarks/>
        public void LogInSecureAsync(string username, string passwordHash, ClientInfo clientInfo, string[] args, object userState) {
            if ((this.LogInSecureOperationCompleted == null)) {
                this.LogInSecureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogInSecureOperationCompleted);
            }
            this.InvokeAsync("LogInSecure", new object[] {
                        username,
                        passwordHash,
                        clientInfo,
                        args}, this.LogInSecureOperationCompleted, userState);
        }
    
        private void OnLogInSecureOperationCompleted(object arg) {
            if ((this.LogInSecureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogInSecureCompleted(this, new LogInSecureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/LogInSecure2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid LogInSecure2(string username, string passwordHash, ClientInfo clientInfo, string[] args, out System.Guid userId, out string[] roles, out SubtitleLanguage[] primaryLanguages, out string[] settings, out User user, out string error) {
            object[] results = this.Invoke("LogInSecure2", new object[] {
                        username,
                        passwordHash,
                        clientInfo,
                        args});
            userId = ((System.Guid)(results[1]));
            roles = ((string[])(results[2]));
            primaryLanguages = ((SubtitleLanguage[])(results[3]));
            settings = ((string[])(results[4]));
            user = ((User)(results[5]));
            error = ((string)(results[6]));
            return ((System.Guid)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginLogInSecure2(string username, string passwordHash, ClientInfo clientInfo, string[] args, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogInSecure2", new object[] {
                        username,
                        passwordHash,
                        clientInfo,
                        args}, callback, asyncState);
        }
    
        /// <remarks/>
        public System.Guid EndLogInSecure2(System.IAsyncResult asyncResult, out System.Guid userId, out string[] roles, out SubtitleLanguage[] primaryLanguages, out string[] settings, out User user, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            userId = ((System.Guid)(results[1]));
            roles = ((string[])(results[2]));
            primaryLanguages = ((SubtitleLanguage[])(results[3]));
            settings = ((string[])(results[4]));
            user = ((User)(results[5]));
            error = ((string)(results[6]));
            return ((System.Guid)(results[0]));
        }
    
        /// <remarks/>
        public void LogInSecure2Async(string username, string passwordHash, ClientInfo clientInfo, string[] args) {
            this.LogInSecure2Async(username, passwordHash, clientInfo, args, null);
        }
    
        /// <remarks/>
        public void LogInSecure2Async(string username, string passwordHash, ClientInfo clientInfo, string[] args, object userState) {
            if ((this.LogInSecure2OperationCompleted == null)) {
                this.LogInSecure2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogInSecure2OperationCompleted);
            }
            this.InvokeAsync("LogInSecure2", new object[] {
                        username,
                        passwordHash,
                        clientInfo,
                        args}, this.LogInSecure2OperationCompleted, userState);
        }
    
        private void OnLogInSecure2OperationCompleted(object arg) {
            if ((this.LogInSecure2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogInSecure2Completed(this, new LogInSecure2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/LogInAnonymous4", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid LogInAnonymous4(ClientInfo clientInfo, string[] args, out string[] settings, out string error) {
            object[] results = this.Invoke("LogInAnonymous4", new object[] {
                        clientInfo,
                        args});
            settings = ((string[])(results[1]));
            error = ((string)(results[2]));
            return ((System.Guid)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginLogInAnonymous4(ClientInfo clientInfo, string[] args, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogInAnonymous4", new object[] {
                        clientInfo,
                        args}, callback, asyncState);
        }
    
        /// <remarks/>
        public System.Guid EndLogInAnonymous4(System.IAsyncResult asyncResult, out string[] settings, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            settings = ((string[])(results[1]));
            error = ((string)(results[2]));
            return ((System.Guid)(results[0]));
        }
    
        /// <remarks/>
        public void LogInAnonymous4Async(ClientInfo clientInfo, string[] args) {
            this.LogInAnonymous4Async(clientInfo, args, null);
        }
    
        /// <remarks/>
        public void LogInAnonymous4Async(ClientInfo clientInfo, string[] args, object userState) {
            if ((this.LogInAnonymous4OperationCompleted == null)) {
                this.LogInAnonymous4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogInAnonymous4OperationCompleted);
            }
            this.InvokeAsync("LogInAnonymous4", new object[] {
                        clientInfo,
                        args}, this.LogInAnonymous4OperationCompleted, userState);
        }
    
        private void OnLogInAnonymous4OperationCompleted(object arg) {
            if ((this.LogInAnonymous4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogInAnonymous4Completed(this, new LogInAnonymous4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/LogOut", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LogOut(System.Guid session, out string error) {
            object[] results = this.Invoke("LogOut", new object[] {
                        session});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginLogOut(System.Guid session, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogOut", new object[] {
                        session}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndLogOut(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void LogOutAsync(System.Guid session) {
            this.LogOutAsync(session, null);
        }
    
        /// <remarks/>
        public void LogOutAsync(System.Guid session, object userState) {
            if ((this.LogOutOperationCompleted == null)) {
                this.LogOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogOutOperationCompleted);
            }
            this.InvokeAsync("LogOut", new object[] {
                        session}, this.LogOutOperationCompleted, userState);
        }
    
        private void OnLogOutOperationCompleted(object arg) {
            if ((this.LogOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogOutCompleted(this, new LogOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetUserBySession", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetUserBySession(System.Guid session, out User user, out string error) {
            object[] results = this.Invoke("GetUserBySession", new object[] {
                        session});
            user = ((User)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetUserBySession(System.Guid session, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserBySession", new object[] {
                        session}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetUserBySession(System.IAsyncResult asyncResult, out User user, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            user = ((User)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetUserBySessionAsync(System.Guid session) {
            this.GetUserBySessionAsync(session, null);
        }
    
        /// <remarks/>
        public void GetUserBySessionAsync(System.Guid session, object userState) {
            if ((this.GetUserBySessionOperationCompleted == null)) {
                this.GetUserBySessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserBySessionOperationCompleted);
            }
            this.InvokeAsync("GetUserBySession", new object[] {
                        session}, this.GetUserBySessionOperationCompleted, userState);
        }
    
        private void OnGetUserBySessionOperationCompleted(object arg) {
            if ((this.GetUserBySessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserBySessionCompleted(this, new GetUserBySessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/Register", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Register(string username, string password, string email, out string error) {
            object[] results = this.Invoke("Register", new object[] {
                        username,
                        password,
                        email});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginRegister(string username, string password, string email, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Register", new object[] {
                        username,
                        password,
                        email}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndRegister(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void RegisterAsync(string username, string password, string email) {
            this.RegisterAsync(username, password, email, null);
        }
    
        /// <remarks/>
        public void RegisterAsync(string username, string password, string email, object userState) {
            if ((this.RegisterOperationCompleted == null)) {
                this.RegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterOperationCompleted);
            }
            this.InvokeAsync("Register", new object[] {
                        username,
                        password,
                        email}, this.RegisterOperationCompleted, userState);
        }
    
        private void OnRegisterOperationCompleted(object arg) {
            if ((this.RegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetUserInfo", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetUserInfo(System.Guid session, out UserInfo userInfo, out string error) {
            object[] results = this.Invoke("GetUserInfo", new object[] {
                        session});
            userInfo = ((UserInfo)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetUserInfo(System.Guid session, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserInfo", new object[] {
                        session}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetUserInfo(System.IAsyncResult asyncResult, out UserInfo userInfo, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            userInfo = ((UserInfo)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetUserInfoAsync(System.Guid session) {
            this.GetUserInfoAsync(session, null);
        }
    
        /// <remarks/>
        public void GetUserInfoAsync(System.Guid session, object userState) {
            if ((this.GetUserInfoOperationCompleted == null)) {
                this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetUserInfo", new object[] {
                        session}, this.GetUserInfoOperationCompleted, userState);
        }
    
        private void OnGetUserInfoOperationCompleted(object arg) {
            if ((this.GetUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetUserLog2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetUserLog2(System.Guid session, out System.Data.DataSet ds, out double points, out string error) {
            object[] results = this.Invoke("GetUserLog2", new object[] {
                        session});
            ds = ((System.Data.DataSet)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetUserLog2(System.Guid session, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserLog2", new object[] {
                        session}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetUserLog2(System.IAsyncResult asyncResult, out System.Data.DataSet ds, out double points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            ds = ((System.Data.DataSet)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetUserLog2Async(System.Guid session) {
            this.GetUserLog2Async(session, null);
        }
    
        /// <remarks/>
        public void GetUserLog2Async(System.Guid session, object userState) {
            if ((this.GetUserLog2OperationCompleted == null)) {
                this.GetUserLog2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLog2OperationCompleted);
            }
            this.InvokeAsync("GetUserLog2", new object[] {
                        session}, this.GetUserLog2OperationCompleted, userState);
        }
    
        private void OnGetUserLog2OperationCompleted(object arg) {
            if ((this.GetUserLog2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserLog2Completed(this, new GetUserLog2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/ChangePassword", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangePassword(System.Guid session, string oldPassword, string newPassword, out string error) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        session,
                        oldPassword,
                        newPassword});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginChangePassword(System.Guid session, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangePassword", new object[] {
                        session,
                        oldPassword,
                        newPassword}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndChangePassword(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void ChangePasswordAsync(System.Guid session, string oldPassword, string newPassword) {
            this.ChangePasswordAsync(session, oldPassword, newPassword, null);
        }
    
        /// <remarks/>
        public void ChangePasswordAsync(System.Guid session, string oldPassword, string newPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        session,
                        oldPassword,
                        newPassword}, this.ChangePasswordOperationCompleted, userState);
        }
    
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/UpdateEmail", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateEmail(System.Guid session, string newEmail, out string error) {
            object[] results = this.Invoke("UpdateEmail", new object[] {
                        session,
                        newEmail});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginUpdateEmail(System.Guid session, string newEmail, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateEmail", new object[] {
                        session,
                        newEmail}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndUpdateEmail(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void UpdateEmailAsync(System.Guid session, string newEmail) {
            this.UpdateEmailAsync(session, newEmail, null);
        }
    
        /// <remarks/>
        public void UpdateEmailAsync(System.Guid session, string newEmail, object userState) {
            if ((this.UpdateEmailOperationCompleted == null)) {
                this.UpdateEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEmailOperationCompleted);
            }
            this.InvokeAsync("UpdateEmail", new object[] {
                        session,
                        newEmail}, this.UpdateEmailOperationCompleted, userState);
        }
    
        private void OnUpdateEmailOperationCompleted(object arg) {
            if ((this.UpdateEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEmailCompleted(this, new UpdateEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/SendComment", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendComment(System.Guid session, string subject, string senderEmail, string message, out string error) {
            object[] results = this.Invoke("SendComment", new object[] {
                        session,
                        subject,
                        senderEmail,
                        message});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginSendComment(System.Guid session, string subject, string senderEmail, string message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendComment", new object[] {
                        session,
                        subject,
                        senderEmail,
                        message}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndSendComment(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void SendCommentAsync(System.Guid session, string subject, string senderEmail, string message) {
            this.SendCommentAsync(session, subject, senderEmail, message, null);
        }
    
        /// <remarks/>
        public void SendCommentAsync(System.Guid session, string subject, string senderEmail, string message, object userState) {
            if ((this.SendCommentOperationCompleted == null)) {
                this.SendCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendCommentOperationCompleted);
            }
            this.InvokeAsync("SendComment", new object[] {
                        session,
                        subject,
                        senderEmail,
                        message}, this.SendCommentOperationCompleted, userState);
        }
    
        private void OnSendCommentOperationCompleted(object arg) {
            if ((this.SendCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendCommentCompleted(this, new SendCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/SuggestTitles", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SuggestTitles(string keyword, int itemsCount, out IMDB[] titles, out string error) {
            object[] results = this.Invoke("SuggestTitles", new object[] {
                        keyword,
                        itemsCount});
            titles = ((IMDB[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginSuggestTitles(string keyword, int itemsCount, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SuggestTitles", new object[] {
                        keyword,
                        itemsCount}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndSuggestTitles(System.IAsyncResult asyncResult, out IMDB[] titles, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            titles = ((IMDB[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void SuggestTitlesAsync(string keyword, int itemsCount) {
            this.SuggestTitlesAsync(keyword, itemsCount, null);
        }
    
        /// <remarks/>
        public void SuggestTitlesAsync(string keyword, int itemsCount, object userState) {
            if ((this.SuggestTitlesOperationCompleted == null)) {
                this.SuggestTitlesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuggestTitlesOperationCompleted);
            }
            this.InvokeAsync("SuggestTitles", new object[] {
                        keyword,
                        itemsCount}, this.SuggestTitlesOperationCompleted, userState);
        }
    
        private void OnSuggestTitlesOperationCompleted(object arg) {
            if ((this.SuggestTitlesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuggestTitlesCompleted(this, new SuggestTitlesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/SuggestTitles2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SuggestTitles2(System.Guid sessionId, string keyword, int itemsCount, out IMDB[] titles, out string error) {
            object[] results = this.Invoke("SuggestTitles2", new object[] {
                        sessionId,
                        keyword,
                        itemsCount});
            titles = ((IMDB[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginSuggestTitles2(System.Guid sessionId, string keyword, int itemsCount, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SuggestTitles2", new object[] {
                        sessionId,
                        keyword,
                        itemsCount}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndSuggestTitles2(System.IAsyncResult asyncResult, out IMDB[] titles, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            titles = ((IMDB[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void SuggestTitles2Async(System.Guid sessionId, string keyword, int itemsCount) {
            this.SuggestTitles2Async(sessionId, keyword, itemsCount, null);
        }
    
        /// <remarks/>
        public void SuggestTitles2Async(System.Guid sessionId, string keyword, int itemsCount, object userState) {
            if ((this.SuggestTitles2OperationCompleted == null)) {
                this.SuggestTitles2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuggestTitles2OperationCompleted);
            }
            this.InvokeAsync("SuggestTitles2", new object[] {
                        sessionId,
                        keyword,
                        itemsCount}, this.SuggestTitles2OperationCompleted, userState);
        }
    
        private void OnSuggestTitles2OperationCompleted(object arg) {
            if ((this.SuggestTitles2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuggestTitles2Completed(this, new SuggestTitles2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddRelease", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddRelease(System.Guid session, System.Guid subtitleId, string release, FPS fps) {
            object[] results = this.Invoke("AddRelease", new object[] {
                        session,
                        subtitleId,
                        release,
                        fps});
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddRelease(System.Guid session, System.Guid subtitleId, string release, FPS fps, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRelease", new object[] {
                        session,
                        subtitleId,
                        release,
                        fps}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddRelease(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddReleaseAsync(System.Guid session, System.Guid subtitleId, string release, FPS fps) {
            this.AddReleaseAsync(session, subtitleId, release, fps, null);
        }
    
        /// <remarks/>
        public void AddReleaseAsync(System.Guid session, System.Guid subtitleId, string release, FPS fps, object userState) {
            if ((this.AddReleaseOperationCompleted == null)) {
                this.AddReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddReleaseOperationCompleted);
            }
            this.InvokeAsync("AddRelease", new object[] {
                        session,
                        subtitleId,
                        release,
                        fps}, this.AddReleaseOperationCompleted, userState);
        }
    
        private void OnAddReleaseOperationCompleted(object arg) {
            if ((this.AddReleaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddReleaseCompleted(this, new AddReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/SearchSubtitles3", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SearchSubtitles3(System.Guid session, string videoHash, string title, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> year, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<byte> season, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> episode, SubtitleLanguage[] languages, Genre[] genres, string sender, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<float> rateGreaterThan, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Subtitle[] subtitles, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Release[] releases, out bool isLimited, out string error) {
            object[] results = this.Invoke("SearchSubtitles3", new object[] {
                        session,
                        videoHash,
                        title,
                        year,
                        season,
                        episode,
                        languages,
                        genres,
                        sender,
                        rateGreaterThan});
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            isLimited = ((bool)(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginSearchSubtitles3(System.Guid session, string videoHash, string title, System.Nullable<int> year, System.Nullable<byte> season, System.Nullable<int> episode, SubtitleLanguage[] languages, Genre[] genres, string sender, System.Nullable<float> rateGreaterThan, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SearchSubtitles3", new object[] {
                        session,
                        videoHash,
                        title,
                        year,
                        season,
                        episode,
                        languages,
                        genres,
                        sender,
                        rateGreaterThan}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndSearchSubtitles3(System.IAsyncResult asyncResult, out Subtitle[] subtitles, out Release[] releases, out bool isLimited, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            isLimited = ((bool)(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void SearchSubtitles3Async(System.Guid session, string videoHash, string title, System.Nullable<int> year, System.Nullable<byte> season, System.Nullable<int> episode, SubtitleLanguage[] languages, Genre[] genres, string sender, System.Nullable<float> rateGreaterThan) {
            this.SearchSubtitles3Async(session, videoHash, title, year, season, episode, languages, genres, sender, rateGreaterThan, null);
        }
    
        /// <remarks/>
        public void SearchSubtitles3Async(System.Guid session, string videoHash, string title, System.Nullable<int> year, System.Nullable<byte> season, System.Nullable<int> episode, SubtitleLanguage[] languages, Genre[] genres, string sender, System.Nullable<float> rateGreaterThan, object userState) {
            if ((this.SearchSubtitles3OperationCompleted == null)) {
                this.SearchSubtitles3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchSubtitles3OperationCompleted);
            }
            this.InvokeAsync("SearchSubtitles3", new object[] {
                        session,
                        videoHash,
                        title,
                        year,
                        season,
                        episode,
                        languages,
                        genres,
                        sender,
                        rateGreaterThan}, this.SearchSubtitles3OperationCompleted, userState);
        }
    
        private void OnSearchSubtitles3OperationCompleted(object arg) {
            if ((this.SearchSubtitles3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchSubtitles3Completed(this, new SearchSubtitles3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/SearchSubtitles4", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SearchSubtitles4(System.Guid session, string[] videoHashes, string title, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> year, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<byte> season, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> episode, SubtitleLanguage[] languages, Genre[] genres, string sender, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<float> rateGreaterThan, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Subtitle[] subtitles, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Release[] releases, out bool isLimited, out string error) {
            object[] results = this.Invoke("SearchSubtitles4", new object[] {
                        session,
                        videoHashes,
                        title,
                        year,
                        season,
                        episode,
                        languages,
                        genres,
                        sender,
                        rateGreaterThan});
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            isLimited = ((bool)(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginSearchSubtitles4(System.Guid session, string[] videoHashes, string title, System.Nullable<int> year, System.Nullable<byte> season, System.Nullable<int> episode, SubtitleLanguage[] languages, Genre[] genres, string sender, System.Nullable<float> rateGreaterThan, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SearchSubtitles4", new object[] {
                        session,
                        videoHashes,
                        title,
                        year,
                        season,
                        episode,
                        languages,
                        genres,
                        sender,
                        rateGreaterThan}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndSearchSubtitles4(System.IAsyncResult asyncResult, out Subtitle[] subtitles, out Release[] releases, out bool isLimited, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            isLimited = ((bool)(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void SearchSubtitles4Async(System.Guid session, string[] videoHashes, string title, System.Nullable<int> year, System.Nullable<byte> season, System.Nullable<int> episode, SubtitleLanguage[] languages, Genre[] genres, string sender, System.Nullable<float> rateGreaterThan) {
            this.SearchSubtitles4Async(session, videoHashes, title, year, season, episode, languages, genres, sender, rateGreaterThan, null);
        }
    
        /// <remarks/>
        public void SearchSubtitles4Async(System.Guid session, string[] videoHashes, string title, System.Nullable<int> year, System.Nullable<byte> season, System.Nullable<int> episode, SubtitleLanguage[] languages, Genre[] genres, string sender, System.Nullable<float> rateGreaterThan, object userState) {
            if ((this.SearchSubtitles4OperationCompleted == null)) {
                this.SearchSubtitles4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchSubtitles4OperationCompleted);
            }
            this.InvokeAsync("SearchSubtitles4", new object[] {
                        session,
                        videoHashes,
                        title,
                        year,
                        season,
                        episode,
                        languages,
                        genres,
                        sender,
                        rateGreaterThan}, this.SearchSubtitles4OperationCompleted, userState);
        }
    
        private void OnSearchSubtitles4OperationCompleted(object arg) {
            if ((this.SearchSubtitles4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchSubtitles4Completed(this, new SearchSubtitles4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetSubtitleById", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetSubtitleById(System.Guid session, System.Guid subtitleId, out Subtitle subtitle, out string error) {
            object[] results = this.Invoke("GetSubtitleById", new object[] {
                        session,
                        subtitleId});
            subtitle = ((Subtitle)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetSubtitleById(System.Guid session, System.Guid subtitleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSubtitleById", new object[] {
                        session,
                        subtitleId}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetSubtitleById(System.IAsyncResult asyncResult, out Subtitle subtitle, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            subtitle = ((Subtitle)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetSubtitleByIdAsync(System.Guid session, System.Guid subtitleId) {
            this.GetSubtitleByIdAsync(session, subtitleId, null);
        }
    
        /// <remarks/>
        public void GetSubtitleByIdAsync(System.Guid session, System.Guid subtitleId, object userState) {
            if ((this.GetSubtitleByIdOperationCompleted == null)) {
                this.GetSubtitleByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubtitleByIdOperationCompleted);
            }
            this.InvokeAsync("GetSubtitleById", new object[] {
                        session,
                        subtitleId}, this.GetSubtitleByIdOperationCompleted, userState);
        }
    
        private void OnGetSubtitleByIdOperationCompleted(object arg) {
            if ((this.GetSubtitleByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubtitleByIdCompleted(this, new GetSubtitleByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetStatistics", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetStatistics(System.Guid session, StatisticsType type, string language, out System.Data.DataSet ds, out string error) {
            object[] results = this.Invoke("GetStatistics", new object[] {
                        session,
                        type,
                        language});
            ds = ((System.Data.DataSet)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetStatistics(System.Guid session, StatisticsType type, string language, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStatistics", new object[] {
                        session,
                        type,
                        language}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetStatistics(System.IAsyncResult asyncResult, out System.Data.DataSet ds, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            ds = ((System.Data.DataSet)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetStatisticsAsync(System.Guid session, StatisticsType type, string language) {
            this.GetStatisticsAsync(session, type, language, null);
        }
    
        /// <remarks/>
        public void GetStatisticsAsync(System.Guid session, StatisticsType type, string language, object userState) {
            if ((this.GetStatisticsOperationCompleted == null)) {
                this.GetStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatisticsOperationCompleted);
            }
            this.InvokeAsync("GetStatistics", new object[] {
                        session,
                        type,
                        language}, this.GetStatisticsOperationCompleted, userState);
        }
    
        private void OnGetStatisticsOperationCompleted(object arg) {
            if ((this.GetStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatisticsCompleted(this, new GetStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/FindIMDB", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FindIMDB(string keyword, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> year, out IMDB[] result, out string error) {
            object[] results = this.Invoke("FindIMDB", new object[] {
                        keyword,
                        year});
            result = ((IMDB[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginFindIMDB(string keyword, System.Nullable<int> year, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindIMDB", new object[] {
                        keyword,
                        year}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndFindIMDB(System.IAsyncResult asyncResult, out IMDB[] result, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((IMDB[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void FindIMDBAsync(string keyword, System.Nullable<int> year) {
            this.FindIMDBAsync(keyword, year, null);
        }
    
        /// <remarks/>
        public void FindIMDBAsync(string keyword, System.Nullable<int> year, object userState) {
            if ((this.FindIMDBOperationCompleted == null)) {
                this.FindIMDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindIMDBOperationCompleted);
            }
            this.InvokeAsync("FindIMDB", new object[] {
                        keyword,
                        year}, this.FindIMDBOperationCompleted, userState);
        }
    
        private void OnFindIMDBOperationCompleted(object arg) {
            if ((this.FindIMDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindIMDBCompleted(this, new FindIMDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/FindIMDB2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FindIMDB2(System.Guid sessionId, string keyword, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> year, out IMDB[] result, out string error) {
            object[] results = this.Invoke("FindIMDB2", new object[] {
                        sessionId,
                        keyword,
                        year});
            result = ((IMDB[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginFindIMDB2(System.Guid sessionId, string keyword, System.Nullable<int> year, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindIMDB2", new object[] {
                        sessionId,
                        keyword,
                        year}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndFindIMDB2(System.IAsyncResult asyncResult, out IMDB[] result, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            result = ((IMDB[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void FindIMDB2Async(System.Guid sessionId, string keyword, System.Nullable<int> year) {
            this.FindIMDB2Async(sessionId, keyword, year, null);
        }
    
        /// <remarks/>
        public void FindIMDB2Async(System.Guid sessionId, string keyword, System.Nullable<int> year, object userState) {
            if ((this.FindIMDB2OperationCompleted == null)) {
                this.FindIMDB2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindIMDB2OperationCompleted);
            }
            this.InvokeAsync("FindIMDB2", new object[] {
                        sessionId,
                        keyword,
                        year}, this.FindIMDB2OperationCompleted, userState);
        }
    
        private void OnFindIMDB2OperationCompleted(object arg) {
            if ((this.FindIMDB2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindIMDB2Completed(this, new FindIMDB2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/RateSubtitle", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RateSubtitle(System.Guid session, System.Guid subtitleId, int rate, out long newVotes, out double newRate) {
            object[] results = this.Invoke("RateSubtitle", new object[] {
                        session,
                        subtitleId,
                        rate});
            newVotes = ((long)(results[1]));
            newRate = ((double)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginRateSubtitle(System.Guid session, System.Guid subtitleId, int rate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RateSubtitle", new object[] {
                        session,
                        subtitleId,
                        rate}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndRateSubtitle(System.IAsyncResult asyncResult, out long newVotes, out double newRate) {
            object[] results = this.EndInvoke(asyncResult);
            newVotes = ((long)(results[1]));
            newRate = ((double)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void RateSubtitleAsync(System.Guid session, System.Guid subtitleId, int rate) {
            this.RateSubtitleAsync(session, subtitleId, rate, null);
        }
    
        /// <remarks/>
        public void RateSubtitleAsync(System.Guid session, System.Guid subtitleId, int rate, object userState) {
            if ((this.RateSubtitleOperationCompleted == null)) {
                this.RateSubtitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRateSubtitleOperationCompleted);
            }
            this.InvokeAsync("RateSubtitle", new object[] {
                        session,
                        subtitleId,
                        rate}, this.RateSubtitleOperationCompleted, userState);
        }
    
        private void OnRateSubtitleOperationCompleted(object arg) {
            if ((this.RateSubtitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RateSubtitleCompleted(this, new RateSubtitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/PublishSubtitle", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishSubtitle(System.Guid session, Subtitle subtitle, string data, out System.Guid ID, out string error) {
            object[] results = this.Invoke("PublishSubtitle", new object[] {
                        session,
                        subtitle,
                        data});
            ID = ((System.Guid)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginPublishSubtitle(System.Guid session, Subtitle subtitle, string data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PublishSubtitle", new object[] {
                        session,
                        subtitle,
                        data}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndPublishSubtitle(System.IAsyncResult asyncResult, out System.Guid ID, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            ID = ((System.Guid)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void PublishSubtitleAsync(System.Guid session, Subtitle subtitle, string data) {
            this.PublishSubtitleAsync(session, subtitle, data, null);
        }
    
        /// <remarks/>
        public void PublishSubtitleAsync(System.Guid session, Subtitle subtitle, string data, object userState) {
            if ((this.PublishSubtitleOperationCompleted == null)) {
                this.PublishSubtitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishSubtitleOperationCompleted);
            }
            this.InvokeAsync("PublishSubtitle", new object[] {
                        session,
                        subtitle,
                        data}, this.PublishSubtitleOperationCompleted, userState);
        }
    
        private void OnPublishSubtitleOperationCompleted(object arg) {
            if ((this.PublishSubtitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishSubtitleCompleted(this, new PublishSubtitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/PublishSubtitle2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishSubtitle2(System.Guid session, Subtitle subtitle, string data, out System.Guid ID, out double points, out string error) {
            object[] results = this.Invoke("PublishSubtitle2", new object[] {
                        session,
                        subtitle,
                        data});
            ID = ((System.Guid)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginPublishSubtitle2(System.Guid session, Subtitle subtitle, string data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PublishSubtitle2", new object[] {
                        session,
                        subtitle,
                        data}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndPublishSubtitle2(System.IAsyncResult asyncResult, out System.Guid ID, out double points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            ID = ((System.Guid)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void PublishSubtitle2Async(System.Guid session, Subtitle subtitle, string data) {
            this.PublishSubtitle2Async(session, subtitle, data, null);
        }
    
        /// <remarks/>
        public void PublishSubtitle2Async(System.Guid session, Subtitle subtitle, string data, object userState) {
            if ((this.PublishSubtitle2OperationCompleted == null)) {
                this.PublishSubtitle2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishSubtitle2OperationCompleted);
            }
            this.InvokeAsync("PublishSubtitle2", new object[] {
                        session,
                        subtitle,
                        data}, this.PublishSubtitle2OperationCompleted, userState);
        }
    
        private void OnPublishSubtitle2OperationCompleted(object arg) {
            if ((this.PublishSubtitle2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishSubtitle2Completed(this, new PublishSubtitle2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/PublishEditedSubtitle2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishEditedSubtitle2(System.Guid session, System.Guid originalSubtitleId, string comment, string data, out System.Guid ID, out double points, out string error) {
            object[] results = this.Invoke("PublishEditedSubtitle2", new object[] {
                        session,
                        originalSubtitleId,
                        comment,
                        data});
            ID = ((System.Guid)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginPublishEditedSubtitle2(System.Guid session, System.Guid originalSubtitleId, string comment, string data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PublishEditedSubtitle2", new object[] {
                        session,
                        originalSubtitleId,
                        comment,
                        data}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndPublishEditedSubtitle2(System.IAsyncResult asyncResult, out System.Guid ID, out double points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            ID = ((System.Guid)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void PublishEditedSubtitle2Async(System.Guid session, System.Guid originalSubtitleId, string comment, string data) {
            this.PublishEditedSubtitle2Async(session, originalSubtitleId, comment, data, null);
        }
    
        /// <remarks/>
        public void PublishEditedSubtitle2Async(System.Guid session, System.Guid originalSubtitleId, string comment, string data, object userState) {
            if ((this.PublishEditedSubtitle2OperationCompleted == null)) {
                this.PublishEditedSubtitle2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishEditedSubtitle2OperationCompleted);
            }
            this.InvokeAsync("PublishEditedSubtitle2", new object[] {
                        session,
                        originalSubtitleId,
                        comment,
                        data}, this.PublishEditedSubtitle2OperationCompleted, userState);
        }
    
        private void OnPublishEditedSubtitle2OperationCompleted(object arg) {
            if ((this.PublishEditedSubtitle2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishEditedSubtitle2Completed(this, new PublishEditedSubtitle2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/PublishEditedSubtitle3", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PublishEditedSubtitle3(System.Guid session, System.Guid originalSubtitleId, string[] attributes, string comment, string data, out System.Guid ID, out double points, out string error) {
            object[] results = this.Invoke("PublishEditedSubtitle3", new object[] {
                        session,
                        originalSubtitleId,
                        attributes,
                        comment,
                        data});
            ID = ((System.Guid)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginPublishEditedSubtitle3(System.Guid session, System.Guid originalSubtitleId, string[] attributes, string comment, string data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PublishEditedSubtitle3", new object[] {
                        session,
                        originalSubtitleId,
                        attributes,
                        comment,
                        data}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndPublishEditedSubtitle3(System.IAsyncResult asyncResult, out System.Guid ID, out double points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            ID = ((System.Guid)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void PublishEditedSubtitle3Async(System.Guid session, System.Guid originalSubtitleId, string[] attributes, string comment, string data) {
            this.PublishEditedSubtitle3Async(session, originalSubtitleId, attributes, comment, data, null);
        }
    
        /// <remarks/>
        public void PublishEditedSubtitle3Async(System.Guid session, System.Guid originalSubtitleId, string[] attributes, string comment, string data, object userState) {
            if ((this.PublishEditedSubtitle3OperationCompleted == null)) {
                this.PublishEditedSubtitle3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishEditedSubtitle3OperationCompleted);
            }
            this.InvokeAsync("PublishEditedSubtitle3", new object[] {
                        session,
                        originalSubtitleId,
                        attributes,
                        comment,
                        data}, this.PublishEditedSubtitle3OperationCompleted, userState);
        }
    
        private void OnPublishEditedSubtitle3OperationCompleted(object arg) {
            if ((this.PublishEditedSubtitle3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishEditedSubtitle3Completed(this, new PublishEditedSubtitle3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/MapHash", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MapHash(System.Guid session, string hash1, string hash2, string imdb, string title, long size, out string error) {
            object[] results = this.Invoke("MapHash", new object[] {
                        session,
                        hash1,
                        hash2,
                        imdb,
                        title,
                        size});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginMapHash(System.Guid session, string hash1, string hash2, string imdb, string title, long size, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MapHash", new object[] {
                        session,
                        hash1,
                        hash2,
                        imdb,
                        title,
                        size}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndMapHash(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void MapHashAsync(System.Guid session, string hash1, string hash2, string imdb, string title, long size) {
            this.MapHashAsync(session, hash1, hash2, imdb, title, size, null);
        }
    
        /// <remarks/>
        public void MapHashAsync(System.Guid session, string hash1, string hash2, string imdb, string title, long size, object userState) {
            if ((this.MapHashOperationCompleted == null)) {
                this.MapHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMapHashOperationCompleted);
            }
            this.InvokeAsync("MapHash", new object[] {
                        session,
                        hash1,
                        hash2,
                        imdb,
                        title,
                        size}, this.MapHashOperationCompleted, userState);
        }
    
        private void OnMapHashOperationCompleted(object arg) {
            if ((this.MapHashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MapHashCompleted(this, new MapHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/CheckSubtitle3", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckSubtitle3(System.Guid session, string ticket, string plugin, string subtitleId, string imdb, string title, string language, string subtitleXml, string data, out SubtitleType subtitleType, out string error) {
            object[] results = this.Invoke("CheckSubtitle3", new object[] {
                        session,
                        ticket,
                        plugin,
                        subtitleId,
                        imdb,
                        title,
                        language,
                        subtitleXml,
                        data});
            subtitleType = ((SubtitleType)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginCheckSubtitle3(System.Guid session, string ticket, string plugin, string subtitleId, string imdb, string title, string language, string subtitleXml, string data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckSubtitle3", new object[] {
                        session,
                        ticket,
                        plugin,
                        subtitleId,
                        imdb,
                        title,
                        language,
                        subtitleXml,
                        data}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndCheckSubtitle3(System.IAsyncResult asyncResult, out SubtitleType subtitleType, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            subtitleType = ((SubtitleType)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void CheckSubtitle3Async(System.Guid session, string ticket, string plugin, string subtitleId, string imdb, string title, string language, string subtitleXml, string data) {
            this.CheckSubtitle3Async(session, ticket, plugin, subtitleId, imdb, title, language, subtitleXml, data, null);
        }
    
        /// <remarks/>
        public void CheckSubtitle3Async(System.Guid session, string ticket, string plugin, string subtitleId, string imdb, string title, string language, string subtitleXml, string data, object userState) {
            if ((this.CheckSubtitle3OperationCompleted == null)) {
                this.CheckSubtitle3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSubtitle3OperationCompleted);
            }
            this.InvokeAsync("CheckSubtitle3", new object[] {
                        session,
                        ticket,
                        plugin,
                        subtitleId,
                        imdb,
                        title,
                        language,
                        subtitleXml,
                        data}, this.CheckSubtitle3OperationCompleted, userState);
        }
    
        private void OnCheckSubtitle3OperationCompleted(object arg) {
            if ((this.CheckSubtitle3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSubtitle3Completed(this, new CheckSubtitle3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/CheckSubtitle4", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckSubtitle4(System.Guid session, string ticket, string plugin, string subtitleId, string imdb, string title, string language, string subtitleXml, string data, out SubtitleType subtitleType, out double points, out string error) {
            object[] results = this.Invoke("CheckSubtitle4", new object[] {
                        session,
                        ticket,
                        plugin,
                        subtitleId,
                        imdb,
                        title,
                        language,
                        subtitleXml,
                        data});
            subtitleType = ((SubtitleType)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginCheckSubtitle4(System.Guid session, string ticket, string plugin, string subtitleId, string imdb, string title, string language, string subtitleXml, string data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckSubtitle4", new object[] {
                        session,
                        ticket,
                        plugin,
                        subtitleId,
                        imdb,
                        title,
                        language,
                        subtitleXml,
                        data}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndCheckSubtitle4(System.IAsyncResult asyncResult, out SubtitleType subtitleType, out double points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            subtitleType = ((SubtitleType)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void CheckSubtitle4Async(System.Guid session, string ticket, string plugin, string subtitleId, string imdb, string title, string language, string subtitleXml, string data) {
            this.CheckSubtitle4Async(session, ticket, plugin, subtitleId, imdb, title, language, subtitleXml, data, null);
        }
    
        /// <remarks/>
        public void CheckSubtitle4Async(System.Guid session, string ticket, string plugin, string subtitleId, string imdb, string title, string language, string subtitleXml, string data, object userState) {
            if ((this.CheckSubtitle4OperationCompleted == null)) {
                this.CheckSubtitle4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSubtitle4OperationCompleted);
            }
            this.InvokeAsync("CheckSubtitle4", new object[] {
                        session,
                        ticket,
                        plugin,
                        subtitleId,
                        imdb,
                        title,
                        language,
                        subtitleXml,
                        data}, this.CheckSubtitle4OperationCompleted, userState);
        }
    
        private void OnCheckSubtitle4OperationCompleted(object arg) {
            if ((this.CheckSubtitle4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSubtitle4Completed(this, new CheckSubtitle4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetDownloadTicket", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDownloadTicket(System.Guid session, string plugin, string id, out string ticket, out short que, out string error) {
            object[] results = this.Invoke("GetDownloadTicket", new object[] {
                        session,
                        plugin,
                        id});
            ticket = ((string)(results[1]));
            que = ((short)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetDownloadTicket(System.Guid session, string plugin, string id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDownloadTicket", new object[] {
                        session,
                        plugin,
                        id}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetDownloadTicket(System.IAsyncResult asyncResult, out string ticket, out short que, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            ticket = ((string)(results[1]));
            que = ((short)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetDownloadTicketAsync(System.Guid session, string plugin, string id) {
            this.GetDownloadTicketAsync(session, plugin, id, null);
        }
    
        /// <remarks/>
        public void GetDownloadTicketAsync(System.Guid session, string plugin, string id, object userState) {
            if ((this.GetDownloadTicketOperationCompleted == null)) {
                this.GetDownloadTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDownloadTicketOperationCompleted);
            }
            this.InvokeAsync("GetDownloadTicket", new object[] {
                        session,
                        plugin,
                        id}, this.GetDownloadTicketOperationCompleted, userState);
        }
    
        private void OnGetDownloadTicketOperationCompleted(object arg) {
            if ((this.GetDownloadTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDownloadTicketCompleted(this, new GetDownloadTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetDownloadTicket2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDownloadTicket2(System.Guid session, string plugin, string id, out string ticket, out short que, out double points, out string error) {
            object[] results = this.Invoke("GetDownloadTicket2", new object[] {
                        session,
                        plugin,
                        id});
            ticket = ((string)(results[1]));
            que = ((short)(results[2]));
            points = ((double)(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetDownloadTicket2(System.Guid session, string plugin, string id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDownloadTicket2", new object[] {
                        session,
                        plugin,
                        id}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetDownloadTicket2(System.IAsyncResult asyncResult, out string ticket, out short que, out double points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            ticket = ((string)(results[1]));
            que = ((short)(results[2]));
            points = ((double)(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetDownloadTicket2Async(System.Guid session, string plugin, string id) {
            this.GetDownloadTicket2Async(session, plugin, id, null);
        }
    
        /// <remarks/>
        public void GetDownloadTicket2Async(System.Guid session, string plugin, string id, object userState) {
            if ((this.GetDownloadTicket2OperationCompleted == null)) {
                this.GetDownloadTicket2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDownloadTicket2OperationCompleted);
            }
            this.InvokeAsync("GetDownloadTicket2", new object[] {
                        session,
                        plugin,
                        id}, this.GetDownloadTicket2OperationCompleted, userState);
        }
    
        private void OnGetDownloadTicket2OperationCompleted(object arg) {
            if ((this.GetDownloadTicket2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDownloadTicket2Completed(this, new GetDownloadTicket2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/UpdateSubtitle", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateSubtitle(System.Guid session, Subtitle subtitle, out string error) {
            object[] results = this.Invoke("UpdateSubtitle", new object[] {
                        session,
                        subtitle});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginUpdateSubtitle(System.Guid session, Subtitle subtitle, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateSubtitle", new object[] {
                        session,
                        subtitle}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndUpdateSubtitle(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void UpdateSubtitleAsync(System.Guid session, Subtitle subtitle) {
            this.UpdateSubtitleAsync(session, subtitle, null);
        }
    
        /// <remarks/>
        public void UpdateSubtitleAsync(System.Guid session, Subtitle subtitle, object userState) {
            if ((this.UpdateSubtitleOperationCompleted == null)) {
                this.UpdateSubtitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSubtitleOperationCompleted);
            }
            this.InvokeAsync("UpdateSubtitle", new object[] {
                        session,
                        subtitle}, this.UpdateSubtitleOperationCompleted, userState);
        }
    
        private void OnUpdateSubtitleOperationCompleted(object arg) {
            if ((this.UpdateSubtitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSubtitleCompleted(this, new UpdateSubtitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/DeleteSubtitle", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteSubtitle(System.Guid session, System.Guid subtitleId, out string error) {
            object[] results = this.Invoke("DeleteSubtitle", new object[] {
                        session,
                        subtitleId});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSubtitle(System.Guid session, System.Guid subtitleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSubtitle", new object[] {
                        session,
                        subtitleId}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndDeleteSubtitle(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void DeleteSubtitleAsync(System.Guid session, System.Guid subtitleId) {
            this.DeleteSubtitleAsync(session, subtitleId, null);
        }
    
        /// <remarks/>
        public void DeleteSubtitleAsync(System.Guid session, System.Guid subtitleId, object userState) {
            if ((this.DeleteSubtitleOperationCompleted == null)) {
                this.DeleteSubtitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSubtitleOperationCompleted);
            }
            this.InvokeAsync("DeleteSubtitle", new object[] {
                        session,
                        subtitleId}, this.DeleteSubtitleOperationCompleted, userState);
        }
    
        private void OnDeleteSubtitleOperationCompleted(object arg) {
            if ((this.DeleteSubtitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSubtitleCompleted(this, new DeleteSubtitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddHashLink3", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddHashLink3(System.Guid session, System.Guid subtitleID, string videoHash, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out System.Nullable<double> points, out string error) {
            object[] results = this.Invoke("AddHashLink3", new object[] {
                        session,
                        subtitleID,
                        videoHash});
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddHashLink3(System.Guid session, System.Guid subtitleID, string videoHash, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddHashLink3", new object[] {
                        session,
                        subtitleID,
                        videoHash}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddHashLink3(System.IAsyncResult asyncResult, out System.Nullable<double> points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddHashLink3Async(System.Guid session, System.Guid subtitleID, string videoHash) {
            this.AddHashLink3Async(session, subtitleID, videoHash, null);
        }
    
        /// <remarks/>
        public void AddHashLink3Async(System.Guid session, System.Guid subtitleID, string videoHash, object userState) {
            if ((this.AddHashLink3OperationCompleted == null)) {
                this.AddHashLink3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHashLink3OperationCompleted);
            }
            this.InvokeAsync("AddHashLink3", new object[] {
                        session,
                        subtitleID,
                        videoHash}, this.AddHashLink3OperationCompleted, userState);
        }
    
        private void OnAddHashLink3OperationCompleted(object arg) {
            if ((this.AddHashLink3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHashLink3Completed(this, new AddHashLink3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddHashLink4", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddHashLink4(System.Guid session, System.Guid subtitleID, string[] hashes, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out System.Nullable<double> points, out string error) {
            object[] results = this.Invoke("AddHashLink4", new object[] {
                        session,
                        subtitleID,
                        hashes});
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddHashLink4(System.Guid session, System.Guid subtitleID, string[] hashes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddHashLink4", new object[] {
                        session,
                        subtitleID,
                        hashes}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddHashLink4(System.IAsyncResult asyncResult, out System.Nullable<double> points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddHashLink4Async(System.Guid session, System.Guid subtitleID, string[] hashes) {
            this.AddHashLink4Async(session, subtitleID, hashes, null);
        }
    
        /// <remarks/>
        public void AddHashLink4Async(System.Guid session, System.Guid subtitleID, string[] hashes, object userState) {
            if ((this.AddHashLink4OperationCompleted == null)) {
                this.AddHashLink4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHashLink4OperationCompleted);
            }
            this.InvokeAsync("AddHashLink4", new object[] {
                        session,
                        subtitleID,
                        hashes}, this.AddHashLink4OperationCompleted, userState);
        }
    
        private void OnAddHashLink4OperationCompleted(object arg) {
            if ((this.AddHashLink4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHashLink4Completed(this, new AddHashLink4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddHashLinkSemiAutomatic3", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddHashLinkSemiAutomatic3(System.Guid session, System.Guid subtitleID, string videoHash, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out System.Nullable<double> points, out string error) {
            object[] results = this.Invoke("AddHashLinkSemiAutomatic3", new object[] {
                        session,
                        subtitleID,
                        videoHash});
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddHashLinkSemiAutomatic3(System.Guid session, System.Guid subtitleID, string videoHash, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddHashLinkSemiAutomatic3", new object[] {
                        session,
                        subtitleID,
                        videoHash}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddHashLinkSemiAutomatic3(System.IAsyncResult asyncResult, out System.Nullable<double> points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddHashLinkSemiAutomatic3Async(System.Guid session, System.Guid subtitleID, string videoHash) {
            this.AddHashLinkSemiAutomatic3Async(session, subtitleID, videoHash, null);
        }
    
        /// <remarks/>
        public void AddHashLinkSemiAutomatic3Async(System.Guid session, System.Guid subtitleID, string videoHash, object userState) {
            if ((this.AddHashLinkSemiAutomatic3OperationCompleted == null)) {
                this.AddHashLinkSemiAutomatic3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHashLinkSemiAutomatic3OperationCompleted);
            }
            this.InvokeAsync("AddHashLinkSemiAutomatic3", new object[] {
                        session,
                        subtitleID,
                        videoHash}, this.AddHashLinkSemiAutomatic3OperationCompleted, userState);
        }
    
        private void OnAddHashLinkSemiAutomatic3OperationCompleted(object arg) {
            if ((this.AddHashLinkSemiAutomatic3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHashLinkSemiAutomatic3Completed(this, new AddHashLinkSemiAutomatic3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddHashLinkSemiAutomatic4", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddHashLinkSemiAutomatic4(System.Guid session, System.Guid subtitleID, string[] hashes, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out System.Nullable<double> points, out string error) {
            object[] results = this.Invoke("AddHashLinkSemiAutomatic4", new object[] {
                        session,
                        subtitleID,
                        hashes});
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddHashLinkSemiAutomatic4(System.Guid session, System.Guid subtitleID, string[] hashes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddHashLinkSemiAutomatic4", new object[] {
                        session,
                        subtitleID,
                        hashes}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddHashLinkSemiAutomatic4(System.IAsyncResult asyncResult, out System.Nullable<double> points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddHashLinkSemiAutomatic4Async(System.Guid session, System.Guid subtitleID, string[] hashes) {
            this.AddHashLinkSemiAutomatic4Async(session, subtitleID, hashes, null);
        }
    
        /// <remarks/>
        public void AddHashLinkSemiAutomatic4Async(System.Guid session, System.Guid subtitleID, string[] hashes, object userState) {
            if ((this.AddHashLinkSemiAutomatic4OperationCompleted == null)) {
                this.AddHashLinkSemiAutomatic4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHashLinkSemiAutomatic4OperationCompleted);
            }
            this.InvokeAsync("AddHashLinkSemiAutomatic4", new object[] {
                        session,
                        subtitleID,
                        hashes}, this.AddHashLinkSemiAutomatic4OperationCompleted, userState);
        }
    
        private void OnAddHashLinkSemiAutomatic4OperationCompleted(object arg) {
            if ((this.AddHashLinkSemiAutomatic4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHashLinkSemiAutomatic4Completed(this, new AddHashLinkSemiAutomatic4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddHashLinkSemiAutomatic5", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddHashLinkSemiAutomatic5(System.Guid session, System.Guid subtitleID, string[] hashes, System.DateTime dtClientNow, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out System.Nullable<double> points, out string error) {
            object[] results = this.Invoke("AddHashLinkSemiAutomatic5", new object[] {
                        session,
                        subtitleID,
                        hashes,
                        dtClientNow});
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddHashLinkSemiAutomatic5(System.Guid session, System.Guid subtitleID, string[] hashes, System.DateTime dtClientNow, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddHashLinkSemiAutomatic5", new object[] {
                        session,
                        subtitleID,
                        hashes,
                        dtClientNow}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddHashLinkSemiAutomatic5(System.IAsyncResult asyncResult, out System.Nullable<double> points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddHashLinkSemiAutomatic5Async(System.Guid session, System.Guid subtitleID, string[] hashes, System.DateTime dtClientNow) {
            this.AddHashLinkSemiAutomatic5Async(session, subtitleID, hashes, dtClientNow, null);
        }
    
        /// <remarks/>
        public void AddHashLinkSemiAutomatic5Async(System.Guid session, System.Guid subtitleID, string[] hashes, System.DateTime dtClientNow, object userState) {
            if ((this.AddHashLinkSemiAutomatic5OperationCompleted == null)) {
                this.AddHashLinkSemiAutomatic5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHashLinkSemiAutomatic5OperationCompleted);
            }
            this.InvokeAsync("AddHashLinkSemiAutomatic5", new object[] {
                        session,
                        subtitleID,
                        hashes,
                        dtClientNow}, this.AddHashLinkSemiAutomatic5OperationCompleted, userState);
        }
    
        private void OnAddHashLinkSemiAutomatic5OperationCompleted(object arg) {
            if ((this.AddHashLinkSemiAutomatic5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHashLinkSemiAutomatic5Completed(this, new AddHashLinkSemiAutomatic5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddHashLinkAutomatic3", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddHashLinkAutomatic3(System.Guid session, System.Guid subtitleID, string videoHash, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out System.Nullable<double> points, out string error) {
            object[] results = this.Invoke("AddHashLinkAutomatic3", new object[] {
                        session,
                        subtitleID,
                        videoHash});
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddHashLinkAutomatic3(System.Guid session, System.Guid subtitleID, string videoHash, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddHashLinkAutomatic3", new object[] {
                        session,
                        subtitleID,
                        videoHash}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddHashLinkAutomatic3(System.IAsyncResult asyncResult, out System.Nullable<double> points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddHashLinkAutomatic3Async(System.Guid session, System.Guid subtitleID, string videoHash) {
            this.AddHashLinkAutomatic3Async(session, subtitleID, videoHash, null);
        }
    
        /// <remarks/>
        public void AddHashLinkAutomatic3Async(System.Guid session, System.Guid subtitleID, string videoHash, object userState) {
            if ((this.AddHashLinkAutomatic3OperationCompleted == null)) {
                this.AddHashLinkAutomatic3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHashLinkAutomatic3OperationCompleted);
            }
            this.InvokeAsync("AddHashLinkAutomatic3", new object[] {
                        session,
                        subtitleID,
                        videoHash}, this.AddHashLinkAutomatic3OperationCompleted, userState);
        }
    
        private void OnAddHashLinkAutomatic3OperationCompleted(object arg) {
            if ((this.AddHashLinkAutomatic3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHashLinkAutomatic3Completed(this, new AddHashLinkAutomatic3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddHashLinkAutomatic4", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddHashLinkAutomatic4(System.Guid session, System.Guid subtitleID, string[] hashes, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out System.Nullable<double> points, out string error) {
            object[] results = this.Invoke("AddHashLinkAutomatic4", new object[] {
                        session,
                        subtitleID,
                        hashes});
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddHashLinkAutomatic4(System.Guid session, System.Guid subtitleID, string[] hashes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddHashLinkAutomatic4", new object[] {
                        session,
                        subtitleID,
                        hashes}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddHashLinkAutomatic4(System.IAsyncResult asyncResult, out System.Nullable<double> points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            points = ((System.Nullable<double>)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddHashLinkAutomatic4Async(System.Guid session, System.Guid subtitleID, string[] hashes) {
            this.AddHashLinkAutomatic4Async(session, subtitleID, hashes, null);
        }
    
        /// <remarks/>
        public void AddHashLinkAutomatic4Async(System.Guid session, System.Guid subtitleID, string[] hashes, object userState) {
            if ((this.AddHashLinkAutomatic4OperationCompleted == null)) {
                this.AddHashLinkAutomatic4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHashLinkAutomatic4OperationCompleted);
            }
            this.InvokeAsync("AddHashLinkAutomatic4", new object[] {
                        session,
                        subtitleID,
                        hashes}, this.AddHashLinkAutomatic4OperationCompleted, userState);
        }
    
        private void OnAddHashLinkAutomatic4OperationCompleted(object arg) {
            if ((this.AddHashLinkAutomatic4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHashLinkAutomatic4Completed(this, new AddHashLinkAutomatic4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/ReportHashLink", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReportHashLink(System.Guid session, System.Guid subtitleID, string videoHash, out string error) {
            object[] results = this.Invoke("ReportHashLink", new object[] {
                        session,
                        subtitleID,
                        videoHash});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginReportHashLink(System.Guid session, System.Guid subtitleID, string videoHash, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReportHashLink", new object[] {
                        session,
                        subtitleID,
                        videoHash}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndReportHashLink(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void ReportHashLinkAsync(System.Guid session, System.Guid subtitleID, string videoHash) {
            this.ReportHashLinkAsync(session, subtitleID, videoHash, null);
        }
    
        /// <remarks/>
        public void ReportHashLinkAsync(System.Guid session, System.Guid subtitleID, string videoHash, object userState) {
            if ((this.ReportHashLinkOperationCompleted == null)) {
                this.ReportHashLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportHashLinkOperationCompleted);
            }
            this.InvokeAsync("ReportHashLink", new object[] {
                        session,
                        subtitleID,
                        videoHash}, this.ReportHashLinkOperationCompleted, userState);
        }
    
        private void OnReportHashLinkOperationCompleted(object arg) {
            if ((this.ReportHashLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportHashLinkCompleted(this, new ReportHashLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetReleases", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetReleases(System.Guid[] subtitleIds, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Release[] releases, out string error) {
            object[] results = this.Invoke("GetReleases", new object[] {
                        subtitleIds});
            releases = ((Release[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetReleases(System.Guid[] subtitleIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReleases", new object[] {
                        subtitleIds}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetReleases(System.IAsyncResult asyncResult, out Release[] releases, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            releases = ((Release[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetReleasesAsync(System.Guid[] subtitleIds) {
            this.GetReleasesAsync(subtitleIds, null);
        }
    
        /// <remarks/>
        public void GetReleasesAsync(System.Guid[] subtitleIds, object userState) {
            if ((this.GetReleasesOperationCompleted == null)) {
                this.GetReleasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReleasesOperationCompleted);
            }
            this.InvokeAsync("GetReleases", new object[] {
                        subtitleIds}, this.GetReleasesOperationCompleted, userState);
        }
    
        private void OnGetReleasesOperationCompleted(object arg) {
            if ((this.GetReleasesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReleasesCompleted(this, new GetReleasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetReleases2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetReleases2(System.Guid session, System.Guid[] subtitleIds, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Release[] releases, out string error) {
            object[] results = this.Invoke("GetReleases2", new object[] {
                        session,
                        subtitleIds});
            releases = ((Release[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetReleases2(System.Guid session, System.Guid[] subtitleIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReleases2", new object[] {
                        session,
                        subtitleIds}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetReleases2(System.IAsyncResult asyncResult, out Release[] releases, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            releases = ((Release[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetReleases2Async(System.Guid session, System.Guid[] subtitleIds) {
            this.GetReleases2Async(session, subtitleIds, null);
        }
    
        /// <remarks/>
        public void GetReleases2Async(System.Guid session, System.Guid[] subtitleIds, object userState) {
            if ((this.GetReleases2OperationCompleted == null)) {
                this.GetReleases2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReleases2OperationCompleted);
            }
            this.InvokeAsync("GetReleases2", new object[] {
                        session,
                        subtitleIds}, this.GetReleases2OperationCompleted, userState);
        }
    
        private void OnGetReleases2OperationCompleted(object arg) {
            if ((this.GetReleases2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReleases2Completed(this, new GetReleases2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetHistory", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetHistory(System.Guid session, System.Guid subtitleID, out HistoryItem[] items, out string error) {
            object[] results = this.Invoke("GetHistory", new object[] {
                        session,
                        subtitleID});
            items = ((HistoryItem[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetHistory(System.Guid session, System.Guid subtitleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHistory", new object[] {
                        session,
                        subtitleID}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetHistory(System.IAsyncResult asyncResult, out HistoryItem[] items, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            items = ((HistoryItem[])(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetHistoryAsync(System.Guid session, System.Guid subtitleID) {
            this.GetHistoryAsync(session, subtitleID, null);
        }
    
        /// <remarks/>
        public void GetHistoryAsync(System.Guid session, System.Guid subtitleID, object userState) {
            if ((this.GetHistoryOperationCompleted == null)) {
                this.GetHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoryOperationCompleted);
            }
            this.InvokeAsync("GetHistory", new object[] {
                        session,
                        subtitleID}, this.GetHistoryOperationCompleted, userState);
        }
    
        private void OnGetHistoryOperationCompleted(object arg) {
            if ((this.GetHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoryCompleted(this, new GetHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/DownloadByID4", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DownloadByID4(System.Guid sessionID, System.Guid subtitleID, int codePage, bool removeFormatting, string ticket, out string data, out double points, out string error) {
            object[] results = this.Invoke("DownloadByID4", new object[] {
                        sessionID,
                        subtitleID,
                        codePage,
                        removeFormatting,
                        ticket});
            data = ((string)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginDownloadByID4(System.Guid sessionID, System.Guid subtitleID, int codePage, bool removeFormatting, string ticket, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DownloadByID4", new object[] {
                        sessionID,
                        subtitleID,
                        codePage,
                        removeFormatting,
                        ticket}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndDownloadByID4(System.IAsyncResult asyncResult, out string data, out double points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            data = ((string)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void DownloadByID4Async(System.Guid sessionID, System.Guid subtitleID, int codePage, bool removeFormatting, string ticket) {
            this.DownloadByID4Async(sessionID, subtitleID, codePage, removeFormatting, ticket, null);
        }
    
        /// <remarks/>
        public void DownloadByID4Async(System.Guid sessionID, System.Guid subtitleID, int codePage, bool removeFormatting, string ticket, object userState) {
            if ((this.DownloadByID4OperationCompleted == null)) {
                this.DownloadByID4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadByID4OperationCompleted);
            }
            this.InvokeAsync("DownloadByID4", new object[] {
                        sessionID,
                        subtitleID,
                        codePage,
                        removeFormatting,
                        ticket}, this.DownloadByID4OperationCompleted, userState);
        }
    
        private void OnDownloadByID4OperationCompleted(object arg) {
            if ((this.DownloadByID4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadByID4Completed(this, new DownloadByID4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/DownloadByID5", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DownloadByID5(System.Guid sessionID, System.Guid subtitleID, int codePage, bool removeFormatting, string ticket, out string data, out double points, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out System.Nullable<System.DateTime> validUntil, out string error) {
            object[] results = this.Invoke("DownloadByID5", new object[] {
                        sessionID,
                        subtitleID,
                        codePage,
                        removeFormatting,
                        ticket});
            data = ((string)(results[1]));
            points = ((double)(results[2]));
            validUntil = ((System.Nullable<System.DateTime>)(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginDownloadByID5(System.Guid sessionID, System.Guid subtitleID, int codePage, bool removeFormatting, string ticket, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DownloadByID5", new object[] {
                        sessionID,
                        subtitleID,
                        codePage,
                        removeFormatting,
                        ticket}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndDownloadByID5(System.IAsyncResult asyncResult, out string data, out double points, out System.Nullable<System.DateTime> validUntil, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            data = ((string)(results[1]));
            points = ((double)(results[2]));
            validUntil = ((System.Nullable<System.DateTime>)(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void DownloadByID5Async(System.Guid sessionID, System.Guid subtitleID, int codePage, bool removeFormatting, string ticket) {
            this.DownloadByID5Async(sessionID, subtitleID, codePage, removeFormatting, ticket, null);
        }
    
        /// <remarks/>
        public void DownloadByID5Async(System.Guid sessionID, System.Guid subtitleID, int codePage, bool removeFormatting, string ticket, object userState) {
            if ((this.DownloadByID5OperationCompleted == null)) {
                this.DownloadByID5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadByID5OperationCompleted);
            }
            this.InvokeAsync("DownloadByID5", new object[] {
                        sessionID,
                        subtitleID,
                        codePage,
                        removeFormatting,
                        ticket}, this.DownloadByID5OperationCompleted, userState);
        }
    
        private void OnDownloadByID5OperationCompleted(object arg) {
            if ((this.DownloadByID5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadByID5Completed(this, new DownloadByID5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/ReportSubtitle", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReportSubtitle(System.Guid session, System.Guid subtitleId) {
            object[] results = this.Invoke("ReportSubtitle", new object[] {
                        session,
                        subtitleId});
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginReportSubtitle(System.Guid session, System.Guid subtitleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReportSubtitle", new object[] {
                        session,
                        subtitleId}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndReportSubtitle(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void ReportSubtitleAsync(System.Guid session, System.Guid subtitleId) {
            this.ReportSubtitleAsync(session, subtitleId, null);
        }
    
        /// <remarks/>
        public void ReportSubtitleAsync(System.Guid session, System.Guid subtitleId, object userState) {
            if ((this.ReportSubtitleOperationCompleted == null)) {
                this.ReportSubtitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportSubtitleOperationCompleted);
            }
            this.InvokeAsync("ReportSubtitle", new object[] {
                        session,
                        subtitleId}, this.ReportSubtitleOperationCompleted, userState);
        }
    
        private void OnReportSubtitleOperationCompleted(object arg) {
            if ((this.ReportSubtitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportSubtitleCompleted(this, new ReportSubtitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/ReportSubtitle2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReportSubtitle2(System.Guid session, System.Guid subtitleId, ReportReason reason, string comment) {
            object[] results = this.Invoke("ReportSubtitle2", new object[] {
                        session,
                        subtitleId,
                        reason,
                        comment});
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginReportSubtitle2(System.Guid session, System.Guid subtitleId, ReportReason reason, string comment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReportSubtitle2", new object[] {
                        session,
                        subtitleId,
                        reason,
                        comment}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndReportSubtitle2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void ReportSubtitle2Async(System.Guid session, System.Guid subtitleId, ReportReason reason, string comment) {
            this.ReportSubtitle2Async(session, subtitleId, reason, comment, null);
        }
    
        /// <remarks/>
        public void ReportSubtitle2Async(System.Guid session, System.Guid subtitleId, ReportReason reason, string comment, object userState) {
            if ((this.ReportSubtitle2OperationCompleted == null)) {
                this.ReportSubtitle2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportSubtitle2OperationCompleted);
            }
            this.InvokeAsync("ReportSubtitle2", new object[] {
                        session,
                        subtitleId,
                        reason,
                        comment}, this.ReportSubtitle2OperationCompleted, userState);
        }
    
        private void OnReportSubtitle2OperationCompleted(object arg) {
            if ((this.ReportSubtitle2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportSubtitle2Completed(this, new ReportSubtitle2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetNewSubtitles", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetNewSubtitles(System.Guid session, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Subtitle[] subtitles, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Release[] releases, out SubtitleActions[] actions, out string error) {
            object[] results = this.Invoke("GetNewSubtitles", new object[] {
                        session});
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            actions = ((SubtitleActions[])(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetNewSubtitles(System.Guid session, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNewSubtitles", new object[] {
                        session}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetNewSubtitles(System.IAsyncResult asyncResult, out Subtitle[] subtitles, out Release[] releases, out SubtitleActions[] actions, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            actions = ((SubtitleActions[])(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetNewSubtitlesAsync(System.Guid session) {
            this.GetNewSubtitlesAsync(session, null);
        }
    
        /// <remarks/>
        public void GetNewSubtitlesAsync(System.Guid session, object userState) {
            if ((this.GetNewSubtitlesOperationCompleted == null)) {
                this.GetNewSubtitlesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewSubtitlesOperationCompleted);
            }
            this.InvokeAsync("GetNewSubtitles", new object[] {
                        session}, this.GetNewSubtitlesOperationCompleted, userState);
        }
    
        private void OnGetNewSubtitlesOperationCompleted(object arg) {
            if ((this.GetNewSubtitlesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewSubtitlesCompleted(this, new GetNewSubtitlesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetFavoriteSubtitles", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetFavoriteSubtitles(System.Guid session, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Subtitle[] subtitles, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Release[] releases, out SubtitleActions[] actions, out string error) {
            object[] results = this.Invoke("GetFavoriteSubtitles", new object[] {
                        session});
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            actions = ((SubtitleActions[])(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetFavoriteSubtitles(System.Guid session, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFavoriteSubtitles", new object[] {
                        session}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetFavoriteSubtitles(System.IAsyncResult asyncResult, out Subtitle[] subtitles, out Release[] releases, out SubtitleActions[] actions, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            actions = ((SubtitleActions[])(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetFavoriteSubtitlesAsync(System.Guid session) {
            this.GetFavoriteSubtitlesAsync(session, null);
        }
    
        /// <remarks/>
        public void GetFavoriteSubtitlesAsync(System.Guid session, object userState) {
            if ((this.GetFavoriteSubtitlesOperationCompleted == null)) {
                this.GetFavoriteSubtitlesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFavoriteSubtitlesOperationCompleted);
            }
            this.InvokeAsync("GetFavoriteSubtitles", new object[] {
                        session}, this.GetFavoriteSubtitlesOperationCompleted, userState);
        }
    
        private void OnGetFavoriteSubtitlesOperationCompleted(object arg) {
            if ((this.GetFavoriteSubtitlesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFavoriteSubtitlesCompleted(this, new GetFavoriteSubtitlesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetMyUploads", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetMyUploads(System.Guid session, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Subtitle[] subtitles, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Release[] releases, out SubtitleActions[] actions, out string error) {
            object[] results = this.Invoke("GetMyUploads", new object[] {
                        session});
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            actions = ((SubtitleActions[])(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetMyUploads(System.Guid session, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMyUploads", new object[] {
                        session}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetMyUploads(System.IAsyncResult asyncResult, out Subtitle[] subtitles, out Release[] releases, out SubtitleActions[] actions, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            actions = ((SubtitleActions[])(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetMyUploadsAsync(System.Guid session) {
            this.GetMyUploadsAsync(session, null);
        }
    
        /// <remarks/>
        public void GetMyUploadsAsync(System.Guid session, object userState) {
            if ((this.GetMyUploadsOperationCompleted == null)) {
                this.GetMyUploadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyUploadsOperationCompleted);
            }
            this.InvokeAsync("GetMyUploads", new object[] {
                        session}, this.GetMyUploadsOperationCompleted, userState);
        }
    
        private void OnGetMyUploadsOperationCompleted(object arg) {
            if ((this.GetMyUploadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyUploadsCompleted(this, new GetMyUploadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetMyDownloads", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetMyDownloads(System.Guid session, System.Guid[] guids, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Subtitle[] subtitles, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Release[] releases, out SubtitleActions[] actions, out string error) {
            object[] results = this.Invoke("GetMyDownloads", new object[] {
                        session,
                        guids});
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            actions = ((SubtitleActions[])(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetMyDownloads(System.Guid session, System.Guid[] guids, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMyDownloads", new object[] {
                        session,
                        guids}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetMyDownloads(System.IAsyncResult asyncResult, out Subtitle[] subtitles, out Release[] releases, out SubtitleActions[] actions, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            subtitles = ((Subtitle[])(results[1]));
            releases = ((Release[])(results[2]));
            actions = ((SubtitleActions[])(results[3]));
            error = ((string)(results[4]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetMyDownloadsAsync(System.Guid session, System.Guid[] guids) {
            this.GetMyDownloadsAsync(session, guids, null);
        }
    
        /// <remarks/>
        public void GetMyDownloadsAsync(System.Guid session, System.Guid[] guids, object userState) {
            if ((this.GetMyDownloadsOperationCompleted == null)) {
                this.GetMyDownloadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyDownloadsOperationCompleted);
            }
            this.InvokeAsync("GetMyDownloads", new object[] {
                        session,
                        guids}, this.GetMyDownloadsOperationCompleted, userState);
        }
    
        private void OnGetMyDownloadsOperationCompleted(object arg) {
            if ((this.GetMyDownloadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyDownloadsCompleted(this, new GetMyDownloadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetSubtitleThanks", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetSubtitleThanks(System.Guid session, System.Guid subtitleId, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out SubtitleThank[] users, out bool allowThanks, out string error) {
            object[] results = this.Invoke("GetSubtitleThanks", new object[] {
                        session,
                        subtitleId});
            users = ((SubtitleThank[])(results[1]));
            allowThanks = ((bool)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetSubtitleThanks(System.Guid session, System.Guid subtitleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSubtitleThanks", new object[] {
                        session,
                        subtitleId}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetSubtitleThanks(System.IAsyncResult asyncResult, out SubtitleThank[] users, out bool allowThanks, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            users = ((SubtitleThank[])(results[1]));
            allowThanks = ((bool)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetSubtitleThanksAsync(System.Guid session, System.Guid subtitleId) {
            this.GetSubtitleThanksAsync(session, subtitleId, null);
        }
    
        /// <remarks/>
        public void GetSubtitleThanksAsync(System.Guid session, System.Guid subtitleId, object userState) {
            if ((this.GetSubtitleThanksOperationCompleted == null)) {
                this.GetSubtitleThanksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubtitleThanksOperationCompleted);
            }
            this.InvokeAsync("GetSubtitleThanks", new object[] {
                        session,
                        subtitleId}, this.GetSubtitleThanksOperationCompleted, userState);
        }
    
        private void OnGetSubtitleThanksOperationCompleted(object arg) {
            if ((this.GetSubtitleThanksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubtitleThanksCompleted(this, new GetSubtitleThanksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddSubtitleThank", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddSubtitleThank(System.Guid session, System.Guid subtitleId, out string error) {
            object[] results = this.Invoke("AddSubtitleThank", new object[] {
                        session,
                        subtitleId});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddSubtitleThank(System.Guid session, System.Guid subtitleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSubtitleThank", new object[] {
                        session,
                        subtitleId}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddSubtitleThank(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddSubtitleThankAsync(System.Guid session, System.Guid subtitleId) {
            this.AddSubtitleThankAsync(session, subtitleId, null);
        }
    
        /// <remarks/>
        public void AddSubtitleThankAsync(System.Guid session, System.Guid subtitleId, object userState) {
            if ((this.AddSubtitleThankOperationCompleted == null)) {
                this.AddSubtitleThankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubtitleThankOperationCompleted);
            }
            this.InvokeAsync("AddSubtitleThank", new object[] {
                        session,
                        subtitleId}, this.AddSubtitleThankOperationCompleted, userState);
        }
    
        private void OnAddSubtitleThankOperationCompleted(object arg) {
            if ((this.AddSubtitleThankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubtitleThankCompleted(this, new AddSubtitleThankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/SubtitlePreview", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubtitlePreview(System.Guid session, System.Guid subtitleId, out string data, out string error) {
            object[] results = this.Invoke("SubtitlePreview", new object[] {
                        session,
                        subtitleId});
            data = ((string)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginSubtitlePreview(System.Guid session, System.Guid subtitleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SubtitlePreview", new object[] {
                        session,
                        subtitleId}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndSubtitlePreview(System.IAsyncResult asyncResult, out string data, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            data = ((string)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void SubtitlePreviewAsync(System.Guid session, System.Guid subtitleId) {
            this.SubtitlePreviewAsync(session, subtitleId, null);
        }
    
        /// <remarks/>
        public void SubtitlePreviewAsync(System.Guid session, System.Guid subtitleId, object userState) {
            if ((this.SubtitlePreviewOperationCompleted == null)) {
                this.SubtitlePreviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubtitlePreviewOperationCompleted);
            }
            this.InvokeAsync("SubtitlePreview", new object[] {
                        session,
                        subtitleId}, this.SubtitlePreviewOperationCompleted, userState);
        }
    
        private void OnSubtitlePreviewOperationCompleted(object arg) {
            if ((this.SubtitlePreviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubtitlePreviewCompleted(this, new SubtitlePreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddAlternativeTitle", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddAlternativeTitle(System.Guid session, System.Guid subtitleID, string title, SubtitleLanguage language, out string error) {
            object[] results = this.Invoke("AddAlternativeTitle", new object[] {
                        session,
                        subtitleID,
                        title,
                        language});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddAlternativeTitle(System.Guid session, System.Guid subtitleID, string title, SubtitleLanguage language, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddAlternativeTitle", new object[] {
                        session,
                        subtitleID,
                        title,
                        language}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddAlternativeTitle(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddAlternativeTitleAsync(System.Guid session, System.Guid subtitleID, string title, SubtitleLanguage language) {
            this.AddAlternativeTitleAsync(session, subtitleID, title, language, null);
        }
    
        /// <remarks/>
        public void AddAlternativeTitleAsync(System.Guid session, System.Guid subtitleID, string title, SubtitleLanguage language, object userState) {
            if ((this.AddAlternativeTitleOperationCompleted == null)) {
                this.AddAlternativeTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAlternativeTitleOperationCompleted);
            }
            this.InvokeAsync("AddAlternativeTitle", new object[] {
                        session,
                        subtitleID,
                        title,
                        language}, this.AddAlternativeTitleOperationCompleted, userState);
        }
    
        private void OnAddAlternativeTitleOperationCompleted(object arg) {
            if ((this.AddAlternativeTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAlternativeTitleCompleted(this, new AddAlternativeTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetSubtitleComments", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetSubtitleComments(System.Guid session, System.Guid subtitleID, SubtitleLanguage language, int elementIndexStart, int elementIndexEnd, out int totalComments, out SubtitleComment[] comments, out string error) {
            object[] results = this.Invoke("GetSubtitleComments", new object[] {
                        session,
                        subtitleID,
                        language,
                        elementIndexStart,
                        elementIndexEnd});
            totalComments = ((int)(results[1]));
            comments = ((SubtitleComment[])(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetSubtitleComments(System.Guid session, System.Guid subtitleID, SubtitleLanguage language, int elementIndexStart, int elementIndexEnd, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSubtitleComments", new object[] {
                        session,
                        subtitleID,
                        language,
                        elementIndexStart,
                        elementIndexEnd}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetSubtitleComments(System.IAsyncResult asyncResult, out int totalComments, out SubtitleComment[] comments, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            totalComments = ((int)(results[1]));
            comments = ((SubtitleComment[])(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetSubtitleCommentsAsync(System.Guid session, System.Guid subtitleID, SubtitleLanguage language, int elementIndexStart, int elementIndexEnd) {
            this.GetSubtitleCommentsAsync(session, subtitleID, language, elementIndexStart, elementIndexEnd, null);
        }
    
        /// <remarks/>
        public void GetSubtitleCommentsAsync(System.Guid session, System.Guid subtitleID, SubtitleLanguage language, int elementIndexStart, int elementIndexEnd, object userState) {
            if ((this.GetSubtitleCommentsOperationCompleted == null)) {
                this.GetSubtitleCommentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubtitleCommentsOperationCompleted);
            }
            this.InvokeAsync("GetSubtitleComments", new object[] {
                        session,
                        subtitleID,
                        language,
                        elementIndexStart,
                        elementIndexEnd}, this.GetSubtitleCommentsOperationCompleted, userState);
        }
    
        private void OnGetSubtitleCommentsOperationCompleted(object arg) {
            if ((this.GetSubtitleCommentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubtitleCommentsCompleted(this, new GetSubtitleCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/SubtitleCommentVote", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubtitleCommentVote(System.Guid session, System.Guid subtitleCommentID, int rate, out int newRate, out string error) {
            object[] results = this.Invoke("SubtitleCommentVote", new object[] {
                        session,
                        subtitleCommentID,
                        rate});
            newRate = ((int)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginSubtitleCommentVote(System.Guid session, System.Guid subtitleCommentID, int rate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SubtitleCommentVote", new object[] {
                        session,
                        subtitleCommentID,
                        rate}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndSubtitleCommentVote(System.IAsyncResult asyncResult, out int newRate, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            newRate = ((int)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void SubtitleCommentVoteAsync(System.Guid session, System.Guid subtitleCommentID, int rate) {
            this.SubtitleCommentVoteAsync(session, subtitleCommentID, rate, null);
        }
    
        /// <remarks/>
        public void SubtitleCommentVoteAsync(System.Guid session, System.Guid subtitleCommentID, int rate, object userState) {
            if ((this.SubtitleCommentVoteOperationCompleted == null)) {
                this.SubtitleCommentVoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubtitleCommentVoteOperationCompleted);
            }
            this.InvokeAsync("SubtitleCommentVote", new object[] {
                        session,
                        subtitleCommentID,
                        rate}, this.SubtitleCommentVoteOperationCompleted, userState);
        }
    
        private void OnSubtitleCommentVoteOperationCompleted(object arg) {
            if ((this.SubtitleCommentVoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubtitleCommentVoteCompleted(this, new SubtitleCommentVoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/SubtitleCommentDelete", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubtitleCommentDelete(System.Guid session, System.Guid subtitleCommentID, out string error) {
            object[] results = this.Invoke("SubtitleCommentDelete", new object[] {
                        session,
                        subtitleCommentID});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginSubtitleCommentDelete(System.Guid session, System.Guid subtitleCommentID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SubtitleCommentDelete", new object[] {
                        session,
                        subtitleCommentID}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndSubtitleCommentDelete(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void SubtitleCommentDeleteAsync(System.Guid session, System.Guid subtitleCommentID) {
            this.SubtitleCommentDeleteAsync(session, subtitleCommentID, null);
        }
    
        /// <remarks/>
        public void SubtitleCommentDeleteAsync(System.Guid session, System.Guid subtitleCommentID, object userState) {
            if ((this.SubtitleCommentDeleteOperationCompleted == null)) {
                this.SubtitleCommentDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubtitleCommentDeleteOperationCompleted);
            }
            this.InvokeAsync("SubtitleCommentDelete", new object[] {
                        session,
                        subtitleCommentID}, this.SubtitleCommentDeleteOperationCompleted, userState);
        }
    
        private void OnSubtitleCommentDeleteOperationCompleted(object arg) {
            if ((this.SubtitleCommentDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubtitleCommentDeleteCompleted(this, new SubtitleCommentDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/AddSubtitleComment", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddSubtitleComment(System.Guid session, System.Guid subtitleID, SubtitleLanguage language, string message, out string error) {
            object[] results = this.Invoke("AddSubtitleComment", new object[] {
                        session,
                        subtitleID,
                        language,
                        message});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginAddSubtitleComment(System.Guid session, System.Guid subtitleID, SubtitleLanguage language, string message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSubtitleComment", new object[] {
                        session,
                        subtitleID,
                        language,
                        message}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndAddSubtitleComment(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void AddSubtitleCommentAsync(System.Guid session, System.Guid subtitleID, SubtitleLanguage language, string message) {
            this.AddSubtitleCommentAsync(session, subtitleID, language, message, null);
        }
    
        /// <remarks/>
        public void AddSubtitleCommentAsync(System.Guid session, System.Guid subtitleID, SubtitleLanguage language, string message, object userState) {
            if ((this.AddSubtitleCommentOperationCompleted == null)) {
                this.AddSubtitleCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubtitleCommentOperationCompleted);
            }
            this.InvokeAsync("AddSubtitleComment", new object[] {
                        session,
                        subtitleID,
                        language,
                        message}, this.AddSubtitleCommentOperationCompleted, userState);
        }
    
        private void OnAddSubtitleCommentOperationCompleted(object arg) {
            if ((this.AddSubtitleCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubtitleCommentCompleted(this, new AddSubtitleCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/SynchronizeSubtitle", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SynchronizeSubtitle(System.Guid sessionID, System.Guid subtitleID, int codePage, float videoFrameRate, float delay, string ticket, out string data, out double points, out string error) {
            object[] results = this.Invoke("SynchronizeSubtitle", new object[] {
                        sessionID,
                        subtitleID,
                        codePage,
                        videoFrameRate,
                        delay,
                        ticket});
            data = ((string)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginSynchronizeSubtitle(System.Guid sessionID, System.Guid subtitleID, int codePage, float videoFrameRate, float delay, string ticket, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SynchronizeSubtitle", new object[] {
                        sessionID,
                        subtitleID,
                        codePage,
                        videoFrameRate,
                        delay,
                        ticket}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndSynchronizeSubtitle(System.IAsyncResult asyncResult, out string data, out double points, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            data = ((string)(results[1]));
            points = ((double)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void SynchronizeSubtitleAsync(System.Guid sessionID, System.Guid subtitleID, int codePage, float videoFrameRate, float delay, string ticket) {
            this.SynchronizeSubtitleAsync(sessionID, subtitleID, codePage, videoFrameRate, delay, ticket, null);
        }
    
        /// <remarks/>
        public void SynchronizeSubtitleAsync(System.Guid sessionID, System.Guid subtitleID, int codePage, float videoFrameRate, float delay, string ticket, object userState) {
            if ((this.SynchronizeSubtitleOperationCompleted == null)) {
                this.SynchronizeSubtitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchronizeSubtitleOperationCompleted);
            }
            this.InvokeAsync("SynchronizeSubtitle", new object[] {
                        sessionID,
                        subtitleID,
                        codePage,
                        videoFrameRate,
                        delay,
                        ticket}, this.SynchronizeSubtitleOperationCompleted, userState);
        }
    
        private void OnSynchronizeSubtitleOperationCompleted(object arg) {
            if ((this.SynchronizeSubtitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchronizeSubtitleCompleted(this, new SynchronizeSubtitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/SubtitleDetectLanguage", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubtitleDetectLanguage(System.Guid session, string compressedText, out SubtitleLanguage language, out string error) {
            object[] results = this.Invoke("SubtitleDetectLanguage", new object[] {
                        session,
                        compressedText});
            language = ((SubtitleLanguage)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginSubtitleDetectLanguage(System.Guid session, string compressedText, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SubtitleDetectLanguage", new object[] {
                        session,
                        compressedText}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndSubtitleDetectLanguage(System.IAsyncResult asyncResult, out SubtitleLanguage language, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            language = ((SubtitleLanguage)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void SubtitleDetectLanguageAsync(System.Guid session, string compressedText) {
            this.SubtitleDetectLanguageAsync(session, compressedText, null);
        }
    
        /// <remarks/>
        public void SubtitleDetectLanguageAsync(System.Guid session, string compressedText, object userState) {
            if ((this.SubtitleDetectLanguageOperationCompleted == null)) {
                this.SubtitleDetectLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubtitleDetectLanguageOperationCompleted);
            }
            this.InvokeAsync("SubtitleDetectLanguage", new object[] {
                        session,
                        compressedText}, this.SubtitleDetectLanguageOperationCompleted, userState);
        }
    
        private void OnSubtitleDetectLanguageOperationCompleted(object arg) {
            if ((this.SubtitleDetectLanguageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubtitleDetectLanguageCompleted(this, new SubtitleDetectLanguageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetPushMessage", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetPushMessage(System.Guid session, string uiLanguage, System.DateTime lastCheck, out PushMessage message, out string error) {
            object[] results = this.Invoke("GetPushMessage", new object[] {
                        session,
                        uiLanguage,
                        lastCheck});
            message = ((PushMessage)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetPushMessage(System.Guid session, string uiLanguage, System.DateTime lastCheck, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPushMessage", new object[] {
                        session,
                        uiLanguage,
                        lastCheck}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetPushMessage(System.IAsyncResult asyncResult, out PushMessage message, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            message = ((PushMessage)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetPushMessageAsync(System.Guid session, string uiLanguage, System.DateTime lastCheck) {
            this.GetPushMessageAsync(session, uiLanguage, lastCheck, null);
        }
    
        /// <remarks/>
        public void GetPushMessageAsync(System.Guid session, string uiLanguage, System.DateTime lastCheck, object userState) {
            if ((this.GetPushMessageOperationCompleted == null)) {
                this.GetPushMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPushMessageOperationCompleted);
            }
            this.InvokeAsync("GetPushMessage", new object[] {
                        session,
                        uiLanguage,
                        lastCheck}, this.GetPushMessageOperationCompleted, userState);
        }
    
        private void OnGetPushMessageOperationCompleted(object arg) {
            if ((this.GetPushMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPushMessageCompleted(this, new GetPushMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetDetails", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDetails(System.Guid session, string imdb, out IMDB imdbInfo, out AlternativeTitle[] alternativeTitles, out string error) {
            object[] results = this.Invoke("GetDetails", new object[] {
                        session,
                        imdb});
            imdbInfo = ((IMDB)(results[1]));
            alternativeTitles = ((AlternativeTitle[])(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetDetails(System.Guid session, string imdb, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDetails", new object[] {
                        session,
                        imdb}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetDetails(System.IAsyncResult asyncResult, out IMDB imdbInfo, out AlternativeTitle[] alternativeTitles, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            imdbInfo = ((IMDB)(results[1]));
            alternativeTitles = ((AlternativeTitle[])(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetDetailsAsync(System.Guid session, string imdb) {
            this.GetDetailsAsync(session, imdb, null);
        }
    
        /// <remarks/>
        public void GetDetailsAsync(System.Guid session, string imdb, object userState) {
            if ((this.GetDetailsOperationCompleted == null)) {
                this.GetDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDetailsOperationCompleted);
            }
            this.InvokeAsync("GetDetails", new object[] {
                        session,
                        imdb}, this.GetDetailsOperationCompleted, userState);
        }
    
        private void OnGetDetailsOperationCompleted(object arg) {
            if ((this.GetDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDetailsCompleted(this, new GetDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetDetailsByHash", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetDetailsByHash(System.Guid session, string hash, out IMDB imdbInfo, out string error) {
            object[] results = this.Invoke("GetDetailsByHash", new object[] {
                        session,
                        hash});
            imdbInfo = ((IMDB)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetDetailsByHash(System.Guid session, string hash, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDetailsByHash", new object[] {
                        session,
                        hash}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetDetailsByHash(System.IAsyncResult asyncResult, out IMDB imdbInfo, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            imdbInfo = ((IMDB)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetDetailsByHashAsync(System.Guid session, string hash) {
            this.GetDetailsByHashAsync(session, hash, null);
        }
    
        /// <remarks/>
        public void GetDetailsByHashAsync(System.Guid session, string hash, object userState) {
            if ((this.GetDetailsByHashOperationCompleted == null)) {
                this.GetDetailsByHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDetailsByHashOperationCompleted);
            }
            this.InvokeAsync("GetDetailsByHash", new object[] {
                        session,
                        hash}, this.GetDetailsByHashOperationCompleted, userState);
        }
    
        private void OnGetDetailsByHashOperationCompleted(object arg) {
            if ((this.GetDetailsByHashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDetailsByHashCompleted(this, new GetDetailsByHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/UpdatePosterUrl", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePosterUrl(System.Guid session, string imdb, string posterUrl, out string error) {
            object[] results = this.Invoke("UpdatePosterUrl", new object[] {
                        session,
                        imdb,
                        posterUrl});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePosterUrl(System.Guid session, string imdb, string posterUrl, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePosterUrl", new object[] {
                        session,
                        imdb,
                        posterUrl}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndUpdatePosterUrl(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void UpdatePosterUrlAsync(System.Guid session, string imdb, string posterUrl) {
            this.UpdatePosterUrlAsync(session, imdb, posterUrl, null);
        }
    
        /// <remarks/>
        public void UpdatePosterUrlAsync(System.Guid session, string imdb, string posterUrl, object userState) {
            if ((this.UpdatePosterUrlOperationCompleted == null)) {
                this.UpdatePosterUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePosterUrlOperationCompleted);
            }
            this.InvokeAsync("UpdatePosterUrl", new object[] {
                        session,
                        imdb,
                        posterUrl}, this.UpdatePosterUrlOperationCompleted, userState);
        }
    
        private void OnUpdatePosterUrlOperationCompleted(object arg) {
            if ((this.UpdatePosterUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePosterUrlCompleted(this, new UpdatePosterUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/UpdatePoster2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePoster2(System.Guid session, string imdb, string posterUrl, string data, out string error) {
            object[] results = this.Invoke("UpdatePoster2", new object[] {
                        session,
                        imdb,
                        posterUrl,
                        data});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePoster2(System.Guid session, string imdb, string posterUrl, string data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePoster2", new object[] {
                        session,
                        imdb,
                        posterUrl,
                        data}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndUpdatePoster2(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void UpdatePoster2Async(System.Guid session, string imdb, string posterUrl, string data) {
            this.UpdatePoster2Async(session, imdb, posterUrl, data, null);
        }
    
        /// <remarks/>
        public void UpdatePoster2Async(System.Guid session, string imdb, string posterUrl, string data, object userState) {
            if ((this.UpdatePoster2OperationCompleted == null)) {
                this.UpdatePoster2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePoster2OperationCompleted);
            }
            this.InvokeAsync("UpdatePoster2", new object[] {
                        session,
                        imdb,
                        posterUrl,
                        data}, this.UpdatePoster2OperationCompleted, userState);
        }
    
        private void OnUpdatePoster2OperationCompleted(object arg) {
            if ((this.UpdatePoster2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePoster2Completed(this, new UpdatePoster2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetPosterUrl", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetPosterUrl(System.Guid session, string posterUrl, out string newPosterUrl, out string error) {
            object[] results = this.Invoke("GetPosterUrl", new object[] {
                        session,
                        posterUrl});
            newPosterUrl = ((string)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetPosterUrl(System.Guid session, string posterUrl, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPosterUrl", new object[] {
                        session,
                        posterUrl}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetPosterUrl(System.IAsyncResult asyncResult, out string newPosterUrl, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            newPosterUrl = ((string)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetPosterUrlAsync(System.Guid session, string posterUrl) {
            this.GetPosterUrlAsync(session, posterUrl, null);
        }
    
        /// <remarks/>
        public void GetPosterUrlAsync(System.Guid session, string posterUrl, object userState) {
            if ((this.GetPosterUrlOperationCompleted == null)) {
                this.GetPosterUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPosterUrlOperationCompleted);
            }
            this.InvokeAsync("GetPosterUrl", new object[] {
                        session,
                        posterUrl}, this.GetPosterUrlOperationCompleted, userState);
        }
    
        private void OnGetPosterUrlOperationCompleted(object arg) {
            if ((this.GetPosterUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPosterUrlCompleted(this, new GetPosterUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetPoster", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetPoster(System.Guid session, string imdb, out string data, out string error) {
            object[] results = this.Invoke("GetPoster", new object[] {
                        session,
                        imdb});
            data = ((string)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetPoster(System.Guid session, string imdb, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPoster", new object[] {
                        session,
                        imdb}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetPoster(System.IAsyncResult asyncResult, out string data, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            data = ((string)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetPosterAsync(System.Guid session, string imdb) {
            this.GetPosterAsync(session, imdb, null);
        }
    
        /// <remarks/>
        public void GetPosterAsync(System.Guid session, string imdb, object userState) {
            if ((this.GetPosterOperationCompleted == null)) {
                this.GetPosterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPosterOperationCompleted);
            }
            this.InvokeAsync("GetPoster", new object[] {
                        session,
                        imdb}, this.GetPosterOperationCompleted, userState);
        }
    
        private void OnGetPosterOperationCompleted(object arg) {
            if ((this.GetPosterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPosterCompleted(this, new GetPosterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetPoster2", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetPoster2(System.Guid session, string imdb, out string data, out int settings, out string error) {
            object[] results = this.Invoke("GetPoster2", new object[] {
                        session,
                        imdb});
            data = ((string)(results[1]));
            settings = ((int)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetPoster2(System.Guid session, string imdb, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPoster2", new object[] {
                        session,
                        imdb}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetPoster2(System.IAsyncResult asyncResult, out string data, out int settings, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            data = ((string)(results[1]));
            settings = ((int)(results[2]));
            error = ((string)(results[3]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetPoster2Async(System.Guid session, string imdb) {
            this.GetPoster2Async(session, imdb, null);
        }
    
        /// <remarks/>
        public void GetPoster2Async(System.Guid session, string imdb, object userState) {
            if ((this.GetPoster2OperationCompleted == null)) {
                this.GetPoster2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPoster2OperationCompleted);
            }
            this.InvokeAsync("GetPoster2", new object[] {
                        session,
                        imdb}, this.GetPoster2OperationCompleted, userState);
        }
    
        private void OnGetPoster2OperationCompleted(object arg) {
            if ((this.GetPoster2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPoster2Completed(this, new GetPoster2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/UpdateUserRating", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateUserRating(System.Guid session, string imdb, float rate, out string error) {
            object[] results = this.Invoke("UpdateUserRating", new object[] {
                        session,
                        imdb,
                        rate});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginUpdateUserRating(System.Guid session, string imdb, float rate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateUserRating", new object[] {
                        session,
                        imdb,
                        rate}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndUpdateUserRating(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void UpdateUserRatingAsync(System.Guid session, string imdb, float rate) {
            this.UpdateUserRatingAsync(session, imdb, rate, null);
        }
    
        /// <remarks/>
        public void UpdateUserRatingAsync(System.Guid session, string imdb, float rate, object userState) {
            if ((this.UpdateUserRatingOperationCompleted == null)) {
                this.UpdateUserRatingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserRatingOperationCompleted);
            }
            this.InvokeAsync("UpdateUserRating", new object[] {
                        session,
                        imdb,
                        rate}, this.UpdateUserRatingOperationCompleted, userState);
        }
    
        private void OnUpdateUserRatingOperationCompleted(object arg) {
            if ((this.UpdateUserRatingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserRatingCompleted(this, new UpdateUserRatingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/VoteMovieHash", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VoteMovieHash(System.Guid session, string imdb, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<byte> season, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> episode, string videoHash, MovieHashVote type, out string error) {
            object[] results = this.Invoke("VoteMovieHash", new object[] {
                        session,
                        imdb,
                        season,
                        episode,
                        videoHash,
                        type});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginVoteMovieHash(System.Guid session, string imdb, System.Nullable<byte> season, System.Nullable<int> episode, string videoHash, MovieHashVote type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VoteMovieHash", new object[] {
                        session,
                        imdb,
                        season,
                        episode,
                        videoHash,
                        type}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndVoteMovieHash(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void VoteMovieHashAsync(System.Guid session, string imdb, System.Nullable<byte> season, System.Nullable<int> episode, string videoHash, MovieHashVote type) {
            this.VoteMovieHashAsync(session, imdb, season, episode, videoHash, type, null);
        }
    
        /// <remarks/>
        public void VoteMovieHashAsync(System.Guid session, string imdb, System.Nullable<byte> season, System.Nullable<int> episode, string videoHash, MovieHashVote type, object userState) {
            if ((this.VoteMovieHashOperationCompleted == null)) {
                this.VoteMovieHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoteMovieHashOperationCompleted);
            }
            this.InvokeAsync("VoteMovieHash", new object[] {
                        session,
                        imdb,
                        season,
                        episode,
                        videoHash,
                        type}, this.VoteMovieHashOperationCompleted, userState);
        }
    
        private void OnVoteMovieHashOperationCompleted(object arg) {
            if ((this.VoteMovieHashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoteMovieHashCompleted(this, new VoteMovieHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/RequestPasswordReset", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RequestPasswordReset(System.Guid session, string username, out string error) {
            object[] results = this.Invoke("RequestPasswordReset", new object[] {
                        session,
                        username});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginRequestPasswordReset(System.Guid session, string username, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequestPasswordReset", new object[] {
                        session,
                        username}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndRequestPasswordReset(System.IAsyncResult asyncResult, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void RequestPasswordResetAsync(System.Guid session, string username) {
            this.RequestPasswordResetAsync(session, username, null);
        }
    
        /// <remarks/>
        public void RequestPasswordResetAsync(System.Guid session, string username, object userState) {
            if ((this.RequestPasswordResetOperationCompleted == null)) {
                this.RequestPasswordResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestPasswordResetOperationCompleted);
            }
            this.InvokeAsync("RequestPasswordReset", new object[] {
                        session,
                        username}, this.RequestPasswordResetOperationCompleted, userState);
        }
    
        private void OnRequestPasswordResetOperationCompleted(object arg) {
            if ((this.RequestPasswordResetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestPasswordResetCompleted(this, new RequestPasswordResetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sublight.si/GetSummary", RequestNamespace="http://www.sublight.si/", ResponseNamespace="http://www.sublight.si/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetSummary(System.Guid session, System.Guid subtitleId, string uiLanguage, out string summary, out string error) {
            object[] results = this.Invoke("GetSummary", new object[] {
                        session,
                        subtitleId,
                        uiLanguage});
            summary = ((string)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginGetSummary(System.Guid session, System.Guid subtitleId, string uiLanguage, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSummary", new object[] {
                        session,
                        subtitleId,
                        uiLanguage}, callback, asyncState);
        }
    
        /// <remarks/>
        public bool EndGetSummary(System.IAsyncResult asyncResult, out string summary, out string error) {
            object[] results = this.EndInvoke(asyncResult);
            summary = ((string)(results[1]));
            error = ((string)(results[2]));
            return ((bool)(results[0]));
        }
    
        /// <remarks/>
        public void GetSummaryAsync(System.Guid session, System.Guid subtitleId, string uiLanguage) {
            this.GetSummaryAsync(session, subtitleId, uiLanguage, null);
        }
    
        /// <remarks/>
        public void GetSummaryAsync(System.Guid session, System.Guid subtitleId, string uiLanguage, object userState) {
            if ((this.GetSummaryOperationCompleted == null)) {
                this.GetSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSummaryOperationCompleted);
            }
            this.InvokeAsync("GetSummary", new object[] {
                        session,
                        subtitleId,
                        uiLanguage}, this.GetSummaryOperationCompleted, userState);
        }
    
        private void OnGetSummaryOperationCompleted(object arg) {
            if ((this.GetSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSummaryCompleted(this, new GetSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class ClientInfo {
    
        private string clientIdField;
    
        private string apiKeyField;
    
        /// <remarks/>
        public string ClientId {
            get {
                return this.clientIdField;
            }
            set {
                this.clientIdField = value;
            }
        }
    
        /// <remarks/>
        public string ApiKey {
            get {
                return this.apiKeyField;
            }
            set {
                this.apiKeyField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class AlternativeTitle {
    
        private System.Guid idField;
    
        private string titleField;
    
        private string languageField;
    
        /// <remarks/>
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    
        /// <remarks/>
        public string Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class PushMessage {
    
        private System.Guid idField;
    
        private System.DateTime createdField;
    
        private PushMessageType typeField;
    
        private string messageField;
    
        private string customButtonTextField;
    
        private string customButtonLinkField;
    
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
    
        /// <remarks/>
        public PushMessageType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    
        /// <remarks/>
        public string CustomButtonText {
            get {
                return this.customButtonTextField;
            }
            set {
                this.customButtonTextField = value;
            }
        }
    
        /// <remarks/>
        public string CustomButtonLink {
            get {
                return this.customButtonLinkField;
            }
            set {
                this.customButtonLinkField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum PushMessageType {
    
        /// <remarks/>
        UserManagedNotification,
    
        /// <remarks/>
        SystemNotificationInfo,
    
        /// <remarks/>
        SystemNotificationWarning,
    
        /// <remarks/>
        SystemNotificationError,
    
        /// <remarks/>
        Other,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class SubtitleComment {
    
        private System.Guid idField;
    
        private SubtitleLanguage languageField;
    
        private System.Guid languageIDField;
    
        private System.Guid subtitleIDField;
    
        private System.Guid userIDField;
    
        private string userField;
    
        private int rateField;
    
        private SubtitleCommentStatus statusField;
    
        private string messageField;
    
        private System.DateTime createdField;
    
        private bool canDeleteField;
    
        /// <remarks/>
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    
        /// <remarks/>
        public SubtitleLanguage Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
    
        /// <remarks/>
        public System.Guid LanguageID {
            get {
                return this.languageIDField;
            }
            set {
                this.languageIDField = value;
            }
        }
    
        /// <remarks/>
        public System.Guid SubtitleID {
            get {
                return this.subtitleIDField;
            }
            set {
                this.subtitleIDField = value;
            }
        }
    
        /// <remarks/>
        public System.Guid UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
    
        /// <remarks/>
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
    
        /// <remarks/>
        public int Rate {
            get {
                return this.rateField;
            }
            set {
                this.rateField = value;
            }
        }
    
        /// <remarks/>
        public SubtitleCommentStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
    
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
    
        /// <remarks/>
        public bool CanDelete {
            get {
                return this.canDeleteField;
            }
            set {
                this.canDeleteField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum SubtitleLanguage {
    
        /// <remarks/>
        Slovenian,
    
        /// <remarks/>
        Croatian,
    
        /// <remarks/>
        SerbianLatin,
    
        /// <remarks/>
        English,
    
        /// <remarks/>
        Spanish,
    
        /// <remarks/>
        French,
    
        /// <remarks/>
        Greek,
    
        /// <remarks/>
        German,
    
        /// <remarks/>
        Russian,
    
        /// <remarks/>
        Chinese,
    
        /// <remarks/>
        Portuguese,
    
        /// <remarks/>
        Dutch,
    
        /// <remarks/>
        Italian,
    
        /// <remarks/>
        Romanian,
    
        /// <remarks/>
        Czech,
    
        /// <remarks/>
        Arabic,
    
        /// <remarks/>
        Polish,
    
        /// <remarks/>
        Turkish,
    
        /// <remarks/>
        Swedish,
    
        /// <remarks/>
        Finnish,
    
        /// <remarks/>
        Hungarian,
    
        /// <remarks/>
        SpanishArgentina,
    
        /// <remarks/>
        Danish,
    
        /// <remarks/>
        Hebrew,
    
        /// <remarks/>
        Estonian,
    
        /// <remarks/>
        Slovak,
    
        /// <remarks/>
        PortugueseBrazil,
    
        /// <remarks/>
        Indonesian,
    
        /// <remarks/>
        Persian,
    
        /// <remarks/>
        Bulgarian,
    
        /// <remarks/>
        Japanese,
    
        /// <remarks/>
        Albanian,
    
        /// <remarks/>
        Belarusian,
    
        /// <remarks/>
        BosnianLatin,
    
        /// <remarks/>
        Hindi,
    
        /// <remarks/>
        Irish,
    
        /// <remarks/>
        Icelandic,
    
        /// <remarks/>
        Catalan,
    
        /// <remarks/>
        Korean,
    
        /// <remarks/>
        Latvian,
    
        /// <remarks/>
        Lithuanian,
    
        /// <remarks/>
        Macedonian,
    
        /// <remarks/>
        Norwegian,
    
        /// <remarks/>
        Thai,
    
        /// <remarks/>
        Ukrainian,
    
        /// <remarks/>
        Vietnamese,
    
        /// <remarks/>
        Unknown,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum SubtitleCommentStatus {
    
        /// <remarks/>
        Unauthorised,
    
        /// <remarks/>
        Authorised,
    
        /// <remarks/>
        AutoDeleted,
    
        /// <remarks/>
        DeletedByCreator,
    
        /// <remarks/>
        DeletedByAdmin,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class SubtitleThank {
    
        private string usernameField;
    
        private System.DateTime createdField;
    
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
    
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class SubtitleActions {
    
        private System.Guid idField;
    
        private bool enableVotingField;
    
        private bool enableReportingField;
    
        /// <remarks/>
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    
        /// <remarks/>
        public bool EnableVoting {
            get {
                return this.enableVotingField;
            }
            set {
                this.enableVotingField = value;
            }
        }
    
        /// <remarks/>
        public bool EnableReporting {
            get {
                return this.enableReportingField;
            }
            set {
                this.enableReportingField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class HistoryItem {
    
        private string usernameField;
    
        private HistoryType typeField;
    
        private System.DateTime changedField;
    
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
    
        /// <remarks/>
        public HistoryType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    
        /// <remarks/>
        public System.DateTime Changed {
            get {
                return this.changedField;
            }
            set {
                this.changedField = value;
            }
        }
    }

    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum HistoryType {
    
        /// <remarks/>
        None = 1,
    
        /// <remarks/>
        Published = 2,
    
        /// <remarks/>
        StatusChanged = 4,
    
        /// <remarks/>
        StatusChangedDeleted = 8,
    
        /// <remarks/>
        StatusChangedAuthorized = 16,
    
        /// <remarks/>
        SubtitleUpdated = 32,
    
        /// <remarks/>
        ImdbUpdated = 64,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class Release {
    
        private System.Guid subtitleIDField;
    
        private System.Guid releaseIDField;
    
        private string nameField;
    
        private FPS fPSField;
    
        /// <remarks/>
        public System.Guid SubtitleID {
            get {
                return this.subtitleIDField;
            }
            set {
                this.subtitleIDField = value;
            }
        }
    
        /// <remarks/>
        public System.Guid ReleaseID {
            get {
                return this.releaseIDField;
            }
            set {
                this.releaseIDField = value;
            }
        }
    
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    
        /// <remarks/>
        public FPS FPS {
            get {
                return this.fPSField;
            }
            set {
                this.fPSField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum FPS {
    
        /// <remarks/>
        FPS_23_976,
    
        /// <remarks/>
        FPS_25,
    
        /// <remarks/>
        FPS_29_97,
    
        /// <remarks/>
        NotAvailable,
    
        /// <remarks/>
        NotSet,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class Subtitle {
    
        private string titleField;
    
        private string iMDBField;
    
        private SubtitleLanguage languageField;
    
        private SubtitleType subtitleTypeField;
    
        private string commentField;
    
        private MediaType mediaTypeField;
    
        private byte numberOfDiscsField;
    
        private string releaseField;
    
        private FPS fPSField;
    
        private Genre genreField;
    
        private System.Guid subtitleIDField;
    
        private System.Guid publisherIDField;
    
        private string publisherField;
    
        private int sizeField;
    
        private int downloadsField;
    
        private int votesField;
    
        private int reportsField;
    
        private float rateField;
    
        private System.Nullable<byte> seasonField;
    
        private System.Nullable<int> episodeField;
    
        private System.DateTime createdField;
    
        private System.Nullable<int> yearField;
    
        private bool isLinkedField;
    
        private byte statusField;
    
        private string externalIdField;
    
        private string nonImdbTitleField;
    
        private string linkField;
    
        private bool canDeleteField;
    
        private System.Guid parentSubtitleIDField;
    
        private int subCountField;
    
        private bool isSynchronizationField;
    
        private bool isHearingImpairedField;
    
        private string parentIMDBField;
    
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    
        /// <remarks/>
        public string IMDB {
            get {
                return this.iMDBField;
            }
            set {
                this.iMDBField = value;
            }
        }
    
        /// <remarks/>
        public SubtitleLanguage Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
    
        /// <remarks/>
        public SubtitleType SubtitleType {
            get {
                return this.subtitleTypeField;
            }
            set {
                this.subtitleTypeField = value;
            }
        }
    
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
    
        /// <remarks/>
        public MediaType MediaType {
            get {
                return this.mediaTypeField;
            }
            set {
                this.mediaTypeField = value;
            }
        }
    
        /// <remarks/>
        public byte NumberOfDiscs {
            get {
                return this.numberOfDiscsField;
            }
            set {
                this.numberOfDiscsField = value;
            }
        }
    
        /// <remarks/>
        public string Release {
            get {
                return this.releaseField;
            }
            set {
                this.releaseField = value;
            }
        }
    
        /// <remarks/>
        public FPS FPS {
            get {
                return this.fPSField;
            }
            set {
                this.fPSField = value;
            }
        }
    
        /// <remarks/>
        public Genre Genre {
            get {
                return this.genreField;
            }
            set {
                this.genreField = value;
            }
        }
    
        /// <remarks/>
        public System.Guid SubtitleID {
            get {
                return this.subtitleIDField;
            }
            set {
                this.subtitleIDField = value;
            }
        }
    
        /// <remarks/>
        public System.Guid PublisherID {
            get {
                return this.publisherIDField;
            }
            set {
                this.publisherIDField = value;
            }
        }
    
        /// <remarks/>
        public string Publisher {
            get {
                return this.publisherField;
            }
            set {
                this.publisherField = value;
            }
        }
    
        /// <remarks/>
        public int Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
    
        /// <remarks/>
        public int Downloads {
            get {
                return this.downloadsField;
            }
            set {
                this.downloadsField = value;
            }
        }
    
        /// <remarks/>
        public int Votes {
            get {
                return this.votesField;
            }
            set {
                this.votesField = value;
            }
        }
    
        /// <remarks/>
        public int Reports {
            get {
                return this.reportsField;
            }
            set {
                this.reportsField = value;
            }
        }
    
        /// <remarks/>
        public float Rate {
            get {
                return this.rateField;
            }
            set {
                this.rateField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<byte> Season {
            get {
                return this.seasonField;
            }
            set {
                this.seasonField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Episode {
            get {
                return this.episodeField;
            }
            set {
                this.episodeField = value;
            }
        }
    
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Year {
            get {
                return this.yearField;
            }
            set {
                this.yearField = value;
            }
        }
    
        /// <remarks/>
        public bool IsLinked {
            get {
                return this.isLinkedField;
            }
            set {
                this.isLinkedField = value;
            }
        }
    
        /// <remarks/>
        public byte Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
    
        /// <remarks/>
        public string ExternalId {
            get {
                return this.externalIdField;
            }
            set {
                this.externalIdField = value;
            }
        }
    
        /// <remarks/>
        public string NonImdbTitle {
            get {
                return this.nonImdbTitleField;
            }
            set {
                this.nonImdbTitleField = value;
            }
        }
    
        /// <remarks/>
        public string Link {
            get {
                return this.linkField;
            }
            set {
                this.linkField = value;
            }
        }
    
        /// <remarks/>
        public bool CanDelete {
            get {
                return this.canDeleteField;
            }
            set {
                this.canDeleteField = value;
            }
        }
    
        /// <remarks/>
        public System.Guid ParentSubtitleID {
            get {
                return this.parentSubtitleIDField;
            }
            set {
                this.parentSubtitleIDField = value;
            }
        }
    
        /// <remarks/>
        public int SubCount {
            get {
                return this.subCountField;
            }
            set {
                this.subCountField = value;
            }
        }
    
        /// <remarks/>
        public bool IsSynchronization {
            get {
                return this.isSynchronizationField;
            }
            set {
                this.isSynchronizationField = value;
            }
        }
    
        /// <remarks/>
        public bool IsHearingImpaired {
            get {
                return this.isHearingImpairedField;
            }
            set {
                this.isHearingImpairedField = value;
            }
        }
    
        /// <remarks/>
        public string ParentIMDB {
            get {
                return this.parentIMDBField;
            }
            set {
                this.parentIMDBField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum SubtitleType {
    
        /// <remarks/>
        Unknown,
    
        /// <remarks/>
        Sub,
    
        /// <remarks/>
        Srt,
    
        /// <remarks/>
        SubViewer2,
    
        /// <remarks/>
        SAMI,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum MediaType {
    
        /// <remarks/>
        CD,
    
        /// <remarks/>
        DVD,
    
        /// <remarks/>
        HD_DVD,
    
        /// <remarks/>
        BlueRay,
    
        /// <remarks/>
        BluRay,
    
        /// <remarks/>
        Unknown,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum Genre {
    
        /// <remarks/>
        Movie,
    
        /// <remarks/>
        Cartoon,
    
        /// <remarks/>
        Serial,
    
        /// <remarks/>
        Documentary,
    
        /// <remarks/>
        Other,
    
        /// <remarks/>
        Unknown,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class IMDB {
    
        private string idField;
    
        private string titleField;
    
        private System.Nullable<int> yearField;
    
        private System.Nullable<int> yearToField;
    
        private System.Nullable<int> seasonField;
    
        private System.Nullable<int> episodeField;
    
        private string posterUrlField;
    
        private System.Nullable<float> userRatingField;
    
        private System.Nullable<System.DateTime> syncDateField;
    
        private string tagField;
    
        private System.Nullable<Genre> genreField;
    
        private IMDB parentIMDBField;
    
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Year {
            get {
                return this.yearField;
            }
            set {
                this.yearField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> YearTo {
            get {
                return this.yearToField;
            }
            set {
                this.yearToField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Season {
            get {
                return this.seasonField;
            }
            set {
                this.seasonField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Episode {
            get {
                return this.episodeField;
            }
            set {
                this.episodeField = value;
            }
        }
    
        /// <remarks/>
        public string PosterUrl {
            get {
                return this.posterUrlField;
            }
            set {
                this.posterUrlField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<float> UserRating {
            get {
                return this.userRatingField;
            }
            set {
                this.userRatingField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> SyncDate {
            get {
                return this.syncDateField;
            }
            set {
                this.syncDateField = value;
            }
        }
    
        /// <remarks/>
        public string Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<Genre> Genre {
            get {
                return this.genreField;
            }
            set {
                this.genreField = value;
            }
        }
    
        /// <remarks/>
        public IMDB ParentIMDB {
            get {
                return this.parentIMDBField;
            }
            set {
                this.parentIMDBField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class UserInfo {
    
        private string usernameField;
    
        private string emailField;
    
        private System.DateTime createdField;
    
        private int subtitlesPublishedField;
    
        private int subtitlesDeletedField;
    
        private int subtitleThanksField;
    
        private double pointsField;
    
        private System.Nullable<System.DateTime> pointsValidUntilField;
    
        private double averageRateField;
    
        private int subtitleDownloadsField;
    
        private int mySubtitleDownloadsField;
    
        private int totalSubtitleDownloadsField;
    
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
    
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
    
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
    
        /// <remarks/>
        public int SubtitlesPublished {
            get {
                return this.subtitlesPublishedField;
            }
            set {
                this.subtitlesPublishedField = value;
            }
        }
    
        /// <remarks/>
        public int SubtitlesDeleted {
            get {
                return this.subtitlesDeletedField;
            }
            set {
                this.subtitlesDeletedField = value;
            }
        }
    
        /// <remarks/>
        public int SubtitleThanks {
            get {
                return this.subtitleThanksField;
            }
            set {
                this.subtitleThanksField = value;
            }
        }
    
        /// <remarks/>
        public double Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> PointsValidUntil {
            get {
                return this.pointsValidUntilField;
            }
            set {
                this.pointsValidUntilField = value;
            }
        }
    
        /// <remarks/>
        public double AverageRate {
            get {
                return this.averageRateField;
            }
            set {
                this.averageRateField = value;
            }
        }
    
        /// <remarks/>
        public int SubtitleDownloads {
            get {
                return this.subtitleDownloadsField;
            }
            set {
                this.subtitleDownloadsField = value;
            }
        }
    
        /// <remarks/>
        public int MySubtitleDownloads {
            get {
                return this.mySubtitleDownloadsField;
            }
            set {
                this.mySubtitleDownloadsField = value;
            }
        }
    
        /// <remarks/>
        public int TotalSubtitleDownloads {
            get {
                return this.totalSubtitleDownloadsField;
            }
            set {
                this.totalSubtitleDownloadsField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public partial class User {
    
        private System.Guid idField;
    
        private string usernameField;
    
        private string displayNameField;
    
        private bool isBuiltInField;
    
        private string emailField;
    
        private System.DateTime createdField;
    
        private string passwordField;
    
        private int subtitleDownloadsField;
    
        private int externalSubtitleDownloadsField;
    
        private System.Nullable<int> confidenceFixedField;
    
        /// <remarks/>
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
    
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    
        /// <remarks/>
        public bool IsBuiltIn {
            get {
                return this.isBuiltInField;
            }
            set {
                this.isBuiltInField = value;
            }
        }
    
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
    
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
    
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    
        /// <remarks/>
        public int SubtitleDownloads {
            get {
                return this.subtitleDownloadsField;
            }
            set {
                this.subtitleDownloadsField = value;
            }
        }
    
        /// <remarks/>
        public int ExternalSubtitleDownloads {
            get {
                return this.externalSubtitleDownloadsField;
            }
            set {
                this.externalSubtitleDownloadsField = value;
            }
        }
    
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ConfidenceFixed {
            get {
                return this.confidenceFixedField;
            }
            set {
                this.confidenceFixedField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum StatisticsType {
    
        /// <remarks/>
        TopMovies,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum ReportReason {
    
        /// <remarks/>
        Custom,
    
        /// <remarks/>
        SubtitleIsForDifferentMovie,
    
        /// <remarks/>
        SubtitleIsForDifferentLanguage,
    
        /// <remarks/>
        SubtitleIsMachineTranslated,
    
        /// <remarks/>
        SubtitleIsBad,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.sublight.si/")]
    public enum MovieHashVote {
    
        /// <remarks/>
        OK,
    
        /// <remarks/>
        WrongMovie,
    
        /// <remarks/>
        WrongSeasonEpisode,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void LogIn6CompletedEventHandler(object sender, LogIn6CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogIn6CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal LogIn6CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Guid userId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string[] roles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public SubtitleLanguage[] primaryLanguages {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleLanguage[])(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string[] settings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[4]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void LogInSecureCompletedEventHandler(object sender, LogInSecureCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogInSecureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal LogInSecureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Guid userId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string[] roles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public SubtitleLanguage[] primaryLanguages {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleLanguage[])(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string[] settings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[4]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void LogInSecure2CompletedEventHandler(object sender, LogInSecure2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogInSecure2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal LogInSecure2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Guid userId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string[] roles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public SubtitleLanguage[] primaryLanguages {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleLanguage[])(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string[] settings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[4]));
            }
        }
    
        /// <remarks/>
        public User user {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[5]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void LogInAnonymous4CompletedEventHandler(object sender, LogInAnonymous4CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogInAnonymous4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal LogInAnonymous4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string[] settings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void LogOutCompletedEventHandler(object sender, LogOutCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal LogOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetUserBySessionCompletedEventHandler(object sender, GetUserBySessionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserBySessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetUserBySessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public User user {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void RegisterCompletedEventHandler(object sender, RegisterCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public UserInfo userInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserInfo)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetUserLog2CompletedEventHandler(object sender, GetUserLog2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserLog2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetUserLog2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Data.DataSet ds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public double points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void UpdateEmailCompletedEventHandler(object sender, UpdateEmailCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal UpdateEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SendCommentCompletedEventHandler(object sender, SendCommentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal SendCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SuggestTitlesCompletedEventHandler(object sender, SuggestTitlesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuggestTitlesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal SuggestTitlesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public IMDB[] titles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IMDB[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SuggestTitles2CompletedEventHandler(object sender, SuggestTitles2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuggestTitles2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal SuggestTitles2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public IMDB[] titles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IMDB[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddReleaseCompletedEventHandler(object sender, AddReleaseCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SearchSubtitles3CompletedEventHandler(object sender, SearchSubtitles3CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchSubtitles3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal SearchSubtitles3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public Subtitle[] subtitles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Subtitle[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public Release[] releases {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Release[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public bool isLimited {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SearchSubtitles4CompletedEventHandler(object sender, SearchSubtitles4CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchSubtitles4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal SearchSubtitles4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public Subtitle[] subtitles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Subtitle[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public Release[] releases {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Release[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public bool isLimited {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetSubtitleByIdCompletedEventHandler(object sender, GetSubtitleByIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubtitleByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetSubtitleByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public Subtitle subtitle {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Subtitle)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetStatisticsCompletedEventHandler(object sender, GetStatisticsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Data.DataSet ds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void FindIMDBCompletedEventHandler(object sender, FindIMDBCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindIMDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal FindIMDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public IMDB[] result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IMDB[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void FindIMDB2CompletedEventHandler(object sender, FindIMDB2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindIMDB2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal FindIMDB2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public IMDB[] result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IMDB[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void RateSubtitleCompletedEventHandler(object sender, RateSubtitleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RateSubtitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal RateSubtitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public long newVotes {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public double newRate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void PublishSubtitleCompletedEventHandler(object sender, PublishSubtitleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishSubtitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal PublishSubtitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Guid ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void PublishSubtitle2CompletedEventHandler(object sender, PublishSubtitle2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishSubtitle2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal PublishSubtitle2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Guid ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public double points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void PublishEditedSubtitle2CompletedEventHandler(object sender, PublishEditedSubtitle2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishEditedSubtitle2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal PublishEditedSubtitle2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Guid ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public double points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void PublishEditedSubtitle3CompletedEventHandler(object sender, PublishEditedSubtitle3CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishEditedSubtitle3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal PublishEditedSubtitle3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Guid ID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public double points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void MapHashCompletedEventHandler(object sender, MapHashCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MapHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal MapHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CheckSubtitle3CompletedEventHandler(object sender, CheckSubtitle3CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSubtitle3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal CheckSubtitle3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public SubtitleType subtitleType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleType)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CheckSubtitle4CompletedEventHandler(object sender, CheckSubtitle4CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSubtitle4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal CheckSubtitle4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public SubtitleType subtitleType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleType)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public double points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetDownloadTicketCompletedEventHandler(object sender, GetDownloadTicketCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDownloadTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetDownloadTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string ticket {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public short que {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetDownloadTicket2CompletedEventHandler(object sender, GetDownloadTicket2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDownloadTicket2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetDownloadTicket2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string ticket {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public short que {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public double points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void UpdateSubtitleCompletedEventHandler(object sender, UpdateSubtitleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSubtitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal UpdateSubtitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void DeleteSubtitleCompletedEventHandler(object sender, DeleteSubtitleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSubtitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal DeleteSubtitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddHashLink3CompletedEventHandler(object sender, AddHashLink3CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHashLink3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddHashLink3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Nullable<double> points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<double>)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddHashLink4CompletedEventHandler(object sender, AddHashLink4CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHashLink4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddHashLink4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Nullable<double> points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<double>)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddHashLinkSemiAutomatic3CompletedEventHandler(object sender, AddHashLinkSemiAutomatic3CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHashLinkSemiAutomatic3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddHashLinkSemiAutomatic3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Nullable<double> points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<double>)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddHashLinkSemiAutomatic4CompletedEventHandler(object sender, AddHashLinkSemiAutomatic4CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHashLinkSemiAutomatic4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddHashLinkSemiAutomatic4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Nullable<double> points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<double>)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddHashLinkSemiAutomatic5CompletedEventHandler(object sender, AddHashLinkSemiAutomatic5CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHashLinkSemiAutomatic5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddHashLinkSemiAutomatic5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Nullable<double> points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<double>)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddHashLinkAutomatic3CompletedEventHandler(object sender, AddHashLinkAutomatic3CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHashLinkAutomatic3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddHashLinkAutomatic3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Nullable<double> points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<double>)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddHashLinkAutomatic4CompletedEventHandler(object sender, AddHashLinkAutomatic4CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHashLinkAutomatic4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddHashLinkAutomatic4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public System.Nullable<double> points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<double>)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ReportHashLinkCompletedEventHandler(object sender, ReportHashLinkCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportHashLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal ReportHashLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetReleasesCompletedEventHandler(object sender, GetReleasesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReleasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetReleasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public Release[] releases {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Release[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetReleases2CompletedEventHandler(object sender, GetReleases2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReleases2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetReleases2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public Release[] releases {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Release[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetHistoryCompletedEventHandler(object sender, GetHistoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public HistoryItem[] items {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HistoryItem[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void DownloadByID4CompletedEventHandler(object sender, DownloadByID4CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadByID4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal DownloadByID4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string data {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public double points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void DownloadByID5CompletedEventHandler(object sender, DownloadByID5CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadByID5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal DownloadByID5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string data {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public double points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public System.Nullable<System.DateTime> validUntil {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<System.DateTime>)(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ReportSubtitleCompletedEventHandler(object sender, ReportSubtitleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportSubtitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal ReportSubtitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ReportSubtitle2CompletedEventHandler(object sender, ReportSubtitle2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportSubtitle2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal ReportSubtitle2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetNewSubtitlesCompletedEventHandler(object sender, GetNewSubtitlesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewSubtitlesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetNewSubtitlesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public Subtitle[] subtitles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Subtitle[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public Release[] releases {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Release[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public SubtitleActions[] actions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleActions[])(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetFavoriteSubtitlesCompletedEventHandler(object sender, GetFavoriteSubtitlesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFavoriteSubtitlesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetFavoriteSubtitlesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public Subtitle[] subtitles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Subtitle[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public Release[] releases {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Release[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public SubtitleActions[] actions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleActions[])(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetMyUploadsCompletedEventHandler(object sender, GetMyUploadsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyUploadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetMyUploadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public Subtitle[] subtitles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Subtitle[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public Release[] releases {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Release[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public SubtitleActions[] actions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleActions[])(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetMyDownloadsCompletedEventHandler(object sender, GetMyDownloadsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyDownloadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetMyDownloadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public Subtitle[] subtitles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Subtitle[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public Release[] releases {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Release[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public SubtitleActions[] actions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleActions[])(this.results[3]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetSubtitleThanksCompletedEventHandler(object sender, GetSubtitleThanksCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubtitleThanksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetSubtitleThanksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public SubtitleThank[] users {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleThank[])(this.results[1]));
            }
        }
    
        /// <remarks/>
        public bool allowThanks {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddSubtitleThankCompletedEventHandler(object sender, AddSubtitleThankCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubtitleThankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddSubtitleThankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SubtitlePreviewCompletedEventHandler(object sender, SubtitlePreviewCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubtitlePreviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal SubtitlePreviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string data {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddAlternativeTitleCompletedEventHandler(object sender, AddAlternativeTitleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAlternativeTitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddAlternativeTitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetSubtitleCommentsCompletedEventHandler(object sender, GetSubtitleCommentsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubtitleCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetSubtitleCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public int totalComments {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public SubtitleComment[] comments {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleComment[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SubtitleCommentVoteCompletedEventHandler(object sender, SubtitleCommentVoteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubtitleCommentVoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal SubtitleCommentVoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public int newRate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SubtitleCommentDeleteCompletedEventHandler(object sender, SubtitleCommentDeleteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubtitleCommentDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal SubtitleCommentDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddSubtitleCommentCompletedEventHandler(object sender, AddSubtitleCommentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubtitleCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal AddSubtitleCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SynchronizeSubtitleCompletedEventHandler(object sender, SynchronizeSubtitleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SynchronizeSubtitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal SynchronizeSubtitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string data {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public double points {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SubtitleDetectLanguageCompletedEventHandler(object sender, SubtitleDetectLanguageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubtitleDetectLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal SubtitleDetectLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public SubtitleLanguage language {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubtitleLanguage)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetPushMessageCompletedEventHandler(object sender, GetPushMessageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPushMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetPushMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public PushMessage message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PushMessage)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetDetailsCompletedEventHandler(object sender, GetDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public IMDB imdbInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IMDB)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public AlternativeTitle[] alternativeTitles {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AlternativeTitle[])(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetDetailsByHashCompletedEventHandler(object sender, GetDetailsByHashCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDetailsByHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetDetailsByHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public IMDB imdbInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IMDB)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void UpdatePosterUrlCompletedEventHandler(object sender, UpdatePosterUrlCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePosterUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal UpdatePosterUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void UpdatePoster2CompletedEventHandler(object sender, UpdatePoster2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePoster2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal UpdatePoster2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetPosterUrlCompletedEventHandler(object sender, GetPosterUrlCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPosterUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetPosterUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string newPosterUrl {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetPosterCompletedEventHandler(object sender, GetPosterCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPosterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetPosterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string data {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetPoster2CompletedEventHandler(object sender, GetPoster2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPoster2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetPoster2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string data {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public int settings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void UpdateUserRatingCompletedEventHandler(object sender, UpdateUserRatingCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserRatingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal UpdateUserRatingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void VoteMovieHashCompletedEventHandler(object sender, VoteMovieHashCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoteMovieHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal VoteMovieHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void RequestPasswordResetCompletedEventHandler(object sender, RequestPasswordResetCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestPasswordResetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal RequestPasswordResetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetSummaryCompletedEventHandler(object sender, GetSummaryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
        private object[] results;
    
        internal GetSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
    
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    
        /// <remarks/>
        public string summary {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}